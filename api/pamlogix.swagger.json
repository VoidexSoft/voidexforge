{
  "swagger": "2.0",
  "info": {
    "title": "Pamlogix Game Backend API",
    "description": "Comprehensive game backend API for Pamlogix with inventory, economy, achievements, energy, tutorials, teams, unlockables, leaderboards, stats, progressions, incentives, auctions, streaks, and challenges.",
    "version": "1.0",
    "contact": {
      "name": "VoidexForge Development Team",
      "url": "https://github.com/voidexforge"
    }
  },
  "tags": [
    {
      "name": "PamlogixService"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/rpc/RPC_ID_ACHIEVEMENTS_CLAIM": {
      "post": {
        "summary": "Claim achievements",
        "description": "Claim one or more achievements which have completed their progress",
        "operationId": "AchievementsClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AchievementsUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Claim rewards with one or more achievement on the server.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AchievementsClaimRequest"
            }
          }
        ],
        "tags": [
          "Achievements"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ACHIEVEMENTS_GET": {
      "get": {
        "summary": "Get achievements",
        "description": "Get all achievements with progress accumulated by the player",
        "operationId": "AchievementsGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AchievementList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ACHIEVEMENTS_UPDATE": {
      "post": {
        "summary": "Update achievements",
        "description": "Update one or more achievements with the same progress amount",
        "operationId": "AchievementsUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AchievementsUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Update progress on one or more achievements on the server.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AchievementsUpdateRequest"
            }
          }
        ],
        "tags": [
          "Achievements"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_BID": {
      "post": {
        "summary": "Bid on auction",
        "description": "Bid on an active auction",
        "operationId": "AuctionsBid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Auction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to place a bid on an active auction.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionBidRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_CANCEL": {
      "post": {
        "summary": "Cancel auction",
        "description": "Cancel an in-progress auction",
        "operationId": "AuctionsCancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionCancel"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to cancel an active auction.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionCancelRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_CLAIM_BID": {
      "post": {
        "summary": "Claim winning bid",
        "description": "Claim a completed auction where the user was the winning bidder",
        "operationId": "AuctionsClaimBid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionClaimBid"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to claim a successful auction by either the winning bidder.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionClaimBidRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_CLAIM_CREATED": {
      "post": {
        "summary": "Claim created auction",
        "description": "Claim a completed auction where the user was the seller",
        "operationId": "AuctionsClaimCreated",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionClaimCreated"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to claim a successful auction by either the creator.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionClaimCreatedRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_CREATE": {
      "post": {
        "summary": "Create auction",
        "description": "Create a new auction",
        "operationId": "AuctionsCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Auction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to create a new auction.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionCreateRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_GET_TEMPLATES": {
      "get": {
        "summary": "Get auction templates",
        "description": "Fetch all available auction templates",
        "operationId": "AuctionsGetTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionTemplates"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_LIST": {
      "post": {
        "summary": "List auctions",
        "description": "List available auctions",
        "operationId": "AuctionsList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to list available auctions, optionally filtered based on given criteria.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionListRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_LIST_BIDS": {
      "post": {
        "summary": "List user bids",
        "description": "List auctions the user has bid on",
        "operationId": "AuctionsListBids",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to retrieve a list of auctions the user has bid on.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionListBidsRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_AUCTIONS_LIST_CREATED": {
      "post": {
        "summary": "List created auctions",
        "description": "List auctions the user has created",
        "operationId": "AuctionsListCreated",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuctionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to retrieve a list of auctions the user has created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionListCreatedRequest"
            }
          }
        ],
        "tags": [
          "Auctions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_BASE_RATE_APP": {
      "post": {
        "summary": "Rate app",
        "description": "Send feedback to the game's developers over email",
        "operationId": "RateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The input message when the user rates the app.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RateAppRequest"
            }
          }
        ],
        "tags": [
          "Base"
        ]
      }
    },
    "/v2/rpc/RPC_ID_BASE_SET_DEVICE_PREFS": {
      "post": {
        "summary": "Set device preferences",
        "description": "Update or create the mobile push device tokens and preferences for the player",
        "operationId": "SetDevicePrefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Update or create the mobile push device tokens and preferences.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DevicePrefsRequest"
            }
          }
        ],
        "tags": [
          "Base"
        ]
      }
    },
    "/v2/rpc/RPC_ID_BASE_SYNC": {
      "post": {
        "summary": "Sync offline data",
        "description": "Sync offline state",
        "operationId": "Sync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SyncResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Input for an offline state sync operation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncRequest"
            }
          }
        ],
        "tags": [
          "Sync"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGES_GET_TEMPLATES": {
      "get": {
        "summary": "Get challenge templates",
        "description": "List all available templates for challenges",
        "operationId": "ChallengesGetTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ChallengeTemplates"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_CLAIM": {
      "post": {
        "summary": "Claim challenge reward",
        "description": "Claim a reward of a challenge",
        "operationId": "ChallengeClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to claim a reward from a challenge, if available. It also culls the challenge once all rewards are claimed.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeClaimRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_CREATE": {
      "post": {
        "summary": "Create challenge",
        "description": "Create a new challenge based on a template",
        "operationId": "ChallengeCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to create a new challenge based on a template.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeCreateRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_GET": {
      "post": {
        "summary": "Get challenge",
        "description": "Get a challenge by id",
        "operationId": "ChallengeGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeGetRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_INVITE": {
      "post": {
        "summary": "Invite to challenge",
        "description": "Invite more users to an ongoing challenge",
        "operationId": "ChallengeInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request for the challenge creator to invite additional users to an ongoing challenge.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeInviteRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_JOIN": {
      "post": {
        "summary": "Join challenge",
        "description": "Join a challenge",
        "operationId": "ChallengeJoin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to join an ongoing challenge.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeJoinRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_LEAVE": {
      "post": {
        "summary": "Leave challenge",
        "description": "Leave a challenge",
        "operationId": "ChallengeLeave",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to leave a challenge.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeLeaveRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_LIST": {
      "post": {
        "summary": "List challenges",
        "description": "List all the user's challenges",
        "operationId": "ChallengeList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ChallengesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Retrieve available challenge leaderboards.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeListRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_SEARCH": {
      "post": {
        "summary": "Search challenges",
        "description": "Search for an open challenge to join",
        "operationId": "ChallengeSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ChallengesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to search for open challenges to join.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeSearchRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_CHALLENGE_SUBMIT_SCORE": {
      "post": {
        "summary": "Submit challenge score",
        "description": "Submit a score to a challenge",
        "operationId": "ChallengeSubmitScore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Challenge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to submit a score to an active challenge.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeSubmitScoreRequest"
            }
          }
        ],
        "tags": [
          "Challenges"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_DONATION_CLAIM": {
      "post": {
        "summary": "Claim donation rewards",
        "description": "Claim one or more rewards which are partially or full donated by other players",
        "operationId": "EconomyDonationClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyDonationClaimRewards"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to claim one or more donations.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyDonationClaimRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_DONATION_GET": {
      "post": {
        "summary": "Get donations",
        "description": "Get progress on one or more donations for a set of players by their IDs",
        "operationId": "EconomyDonationGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyDonationsByUserList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to get donations for one or more users.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyDonationGetRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_DONATION_GIVE": {
      "post": {
        "summary": "Give donation",
        "description": "Donate some resource (currencies, items, etc.) to a user by donation ID",
        "operationId": "EconomyDonationGive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to give a donation to a user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyDonationGiveRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_DONATION_REQUEST": {
      "post": {
        "summary": "Request donation",
        "description": "Request a donation which other players can contribute into",
        "operationId": "EconomyDonationCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyDonationAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request a new donation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyDonationRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_GRANT": {
      "post": {
        "summary": "Grant economy resources",
        "description": "Grant one or more currencies or reward modifiers to the player",
        "operationId": "EconomyGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represents a request to grant rewards to the user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyGrantRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_PLACEMENT_START": {
      "post": {
        "summary": "Start placement",
        "description": "Start a new Ad placement by placement ID",
        "operationId": "EconomyPlacementStart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyPlacementStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to start a placement reward.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyPlacementStartRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_PLACEMENT_STATUS": {
      "post": {
        "summary": "Get placement status",
        "description": "Get the current status on an Ad placement which may have been rewarded",
        "operationId": "EconomyPlacementStatusGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyPlacementStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to retrieve status af a specific placement instance by reward ID.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyPlacementStatusRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_PURCHASE_INTENT": {
      "post": {
        "summary": "Purchase intent",
        "description": "Send a marker of intent to purchase by the player",
        "operationId": "EconomyPurchaseIntent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to create a store item purchase intent.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyPurchaseIntentRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_PURCHASE_ITEM": {
      "post": {
        "summary": "Purchase store item",
        "description": "Purchase a store item by the player",
        "operationId": "EconomyPurchaseItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyPurchaseAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to purchase a particular store item.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyPurchaseRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_PURCHASE_RESTORE": {
      "post": {
        "summary": "Restore purchases",
        "description": "Restore a set of purchases",
        "operationId": "EconomyPurchaseRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to restore a set of purchases.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyPurchaseRestoreRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ECONOMY_STORE_GET": {
      "post": {
        "summary": "Get store items",
        "description": "Get all store items defined in the Virtual Store",
        "operationId": "EconomyStoreGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EconomyList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represents a request to retrieve available store items.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EconomyListRequest"
            }
          }
        ],
        "tags": [
          "Economy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ENERGY_GET": {
      "get": {
        "summary": "Get energy status",
        "description": "Get the energies and their current timers for the player",
        "operationId": "EnergyGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EnergyList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Energy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ENERGY_GRANT": {
      "post": {
        "summary": "Grant energy",
        "description": "Grant one or more energies to the player",
        "operationId": "EnergyGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EnergyList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to grant one or more energy amounts.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnergyGrantRequest"
            }
          }
        ],
        "tags": [
          "Energy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_ENERGY_SPEND": {
      "post": {
        "summary": "Spend energy",
        "description": "Spend one or more energies for the player",
        "operationId": "EnergySpend",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EnergySpendReward"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to spend one or more energy amounts.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnergySpendRequest"
            }
          }
        ],
        "tags": [
          "Energy"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_CLAIM": {
      "post": {
        "summary": "Claim event leaderboard rewards",
        "description": "Claim rewards from an event leaderboard based on the user's final ranking",
        "operationId": "EventLeaderboardsClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Claim the available reward for an event leaderboard by ID.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardClaim"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_DEBUG_FILL": {
      "post": {
        "summary": "Debug fill event leaderboard",
        "description": "DEBUG: Fill an event leaderboard with random user IDs for testing purposes",
        "operationId": "EventLeaderboardsDebugFill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardDebugFillRequest"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_DEBUG_RANDOM_SCORES": {
      "post": {
        "summary": "Debug assign random scores",
        "description": "DEBUG: Assign random scores within a given range to users in the caller's cohort for testing",
        "operationId": "EventLeaderboardsDebugRandomScores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "DEBUG. Payload describing scores to set for a cohort's participants.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardDebugRandomScoresRequest"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_GET": {
      "post": {
        "summary": "Get event leaderboard",
        "description": "Get a specific event leaderboard by ID with current standings and user position",
        "operationId": "EventLeaderboardsGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Find and retrieve an event leaderboard by ID, automatically joining the event if necessary.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardGet"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_LIST": {
      "get": {
        "summary": "List event leaderboards",
        "description": "List available event leaderboards with optional filtering by categories and score inclusion",
        "operationId": "EventLeaderboardsList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboards"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "withScores",
            "description": "Whether or not the response should include scores, defaults to false.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "categories",
            "description": "Optional filter of Event Leaderboard categories to list. If empty does not filter on category.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_ROLL": {
      "post": {
        "summary": "Roll event leaderboard cohort",
        "description": "Roll a new cohort for the specified event leaderboard, starting a fresh competition period",
        "operationId": "EventLeaderboardsRoll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Roll a new cohort for the specified event leaderboard.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardRoll"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_EVENT_LEADERBOARD_UPDATE": {
      "post": {
        "summary": "Update event leaderboard score",
        "description": "Update an event leaderboard record for the current user with new score and optional metadata",
        "operationId": "EventLeaderboardsUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventLeaderboard"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Submit a score to an event leaderboard.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardUpdate"
            }
          }
        ],
        "tags": [
          "Event Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_RECIPIENT_CLAIM": {
      "post": {
        "summary": "Claim recipient incentive",
        "description": "Claim an existing incentive and receive associated rewards",
        "operationId": "IncentivesRecipientClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request by a potential incentive claimant to claim an incentive.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncentiveRecipientClaimRequest"
            }
          }
        ],
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_RECIPIENT_GET": {
      "post": {
        "summary": "Get recipient incentive info",
        "description": "Get information about an existing incentive from a recipient's perspective",
        "operationId": "IncentivesRecipientGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request by a potential incentive claimant to view incentive information.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncentiveRecipientGetRequest"
            }
          }
        ],
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_SENDER_CLAIM": {
      "post": {
        "summary": "Claim sender incentive rewards",
        "description": "Claim rewards for an existing incentive after it has been used by some recipient(s)",
        "operationId": "IncentivesSenderClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request by a user to claim rewards from an incentive they had set up.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncentiveSenderClaimRequest"
            }
          }
        ],
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_SENDER_CREATE": {
      "post": {
        "summary": "Create sender incentive",
        "description": "Create a new incentive set up by the user",
        "operationId": "IncentivesSenderCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request by a user to set up a new incentive.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncentiveSenderCreateRequest"
            }
          }
        ],
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_SENDER_DELETE": {
      "post": {
        "summary": "Delete sender incentive",
        "description": "Delete an existing incentive set up by the user",
        "operationId": "IncentivesSenderDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request by a user to delete an incentive they had set up.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncentiveSenderDeleteRequest"
            }
          }
        ],
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INCENTIVES_SENDER_LIST": {
      "get": {
        "summary": "List sender incentives",
        "description": "List incentives set up by the user",
        "operationId": "IncentivesSenderList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncentiveList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Incentives"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INVENTORY_CONSUME": {
      "post": {
        "summary": "Consume inventory items",
        "description": "Consume one or more inventory items owned by the player",
        "operationId": "InventoryConsume",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InventoryConsumeRewards"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to consume some amount of items.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryConsumeRequest"
            }
          }
        ],
        "tags": [
          "Inventory"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INVENTORY_GRANT": {
      "post": {
        "summary": "Grant inventory items",
        "description": "Grant one or more inventory items to the player. Call with: http://localhost:7350/v2/rpc/RPC_ID_INVENTORY_GRANT?http_key=defaulthttpkey\u0026unwrap=true",
        "operationId": "InventoryGrant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InventoryUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represents a request to grant items to the user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryGrantRequest"
            }
          }
        ],
        "tags": [
          "Inventory"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INVENTORY_LIST": {
      "get": {
        "summary": "List inventory items",
        "description": "List all inventory items defined in the codex",
        "operationId": "GetInventoryItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InventoryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "itemCategory",
            "description": "The category for the items to filter for, or empty for all",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Inventory"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INVENTORY_LIST_INVENTORY": {
      "get": {
        "summary": "List owned inventory items",
        "description": "List all inventory items owned by the player",
        "operationId": "GetOwnedInventoryItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InventoryList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "itemCategory",
            "description": "The category for the items to filter for, or empty for all",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Inventory"
        ]
      }
    },
    "/v2/rpc/RPC_ID_INVENTORY_UPDATE": {
      "post": {
        "summary": "Update inventory items",
        "description": "Update the properties on one or more inventory items owned by the player",
        "operationId": "InventoryUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/InventoryUpdateAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represents a request to update properties of instanced items.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryUpdateItemsRequest"
            }
          }
        ],
        "tags": [
          "Inventory"
        ]
      }
    },
    "/v2/rpc/RPC_ID_LEADERBOARDS_CONFIG_GET": {
      "get": {
        "summary": "Get leaderboard configs",
        "description": "Get the leaderboards defined for the game",
        "operationId": "LeaderboardsConfigGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LeaderboardConfigList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Leaderboards"
        ]
      }
    },
    "/v2/rpc/RPC_ID_PROGRESSIONS_GET": {
      "post": {
        "summary": "Get progressions",
        "description": "Get progressions",
        "operationId": "ProgressionsGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProgressionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request progressions for a user, optionally including previously seen state for delta calculations.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgressionGetRequest"
            }
          }
        ],
        "tags": [
          "Progressions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_PROGRESSIONS_PURCHASE": {
      "post": {
        "summary": "Purchase progression",
        "description": "Purchase a progression for permanent unlock, if supported",
        "operationId": "ProgressionsPurchase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProgressionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to permanently unlock a progression, if supported by that specific progression.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgressionPurchaseRequest"
            }
          }
        ],
        "tags": [
          "Progressions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_PROGRESSIONS_RESET": {
      "post": {
        "summary": "Reset progressions",
        "description": "Reset progression progress",
        "operationId": "ProgressionsReset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProgressionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to reset progression progress.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgressionResetRequest"
            }
          }
        ],
        "tags": [
          "Progressions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_PROGRESSIONS_UPDATE": {
      "post": {
        "summary": "Update progression",
        "description": "Update a progression to change its count, if supported",
        "operationId": "ProgressionsUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProgressionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to update a progression, if supported by that specific progression.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgressionUpdateRequest"
            }
          }
        ],
        "tags": [
          "Progressions"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STATS_GET": {
      "get": {
        "summary": "Get stats",
        "description": "Get all stats",
        "operationId": "StatsGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StatList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Stats"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STATS_UPDATE": {
      "post": {
        "summary": "Update stats",
        "description": "Update private stats",
        "operationId": "StatsUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StatList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request an optionally batched stats update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StatUpdateRequest"
            }
          }
        ],
        "tags": [
          "Stats"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STREAKS_CLAIM": {
      "post": {
        "summary": "Claim streak rewards",
        "description": "Claim the rewards from one or more streaks",
        "operationId": "StreaksClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StreaksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to claim rewards for one or more streaks.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreaksClaimRequest"
            }
          }
        ],
        "tags": [
          "Streaks"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STREAKS_LIST": {
      "get": {
        "summary": "List streaks",
        "description": "List all available streaks, including their current state and progress if any",
        "operationId": "StreaksGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StreaksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Streaks"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STREAKS_RESET": {
      "post": {
        "summary": "Reset streaks",
        "description": "Reset all progress for one or more streaks",
        "operationId": "StreaksReset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StreaksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to fully reset the progress of one or more streaks.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreaksResetRequest"
            }
          }
        ],
        "tags": [
          "Streaks"
        ]
      }
    },
    "/v2/rpc/RPC_ID_STREAKS_UPDATE": {
      "post": {
        "summary": "Update streaks",
        "description": "Update one or more streaks with the given progress amounts",
        "operationId": "StreaksUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/StreaksList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to update one or more streaks with new progress.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreaksUpdateRequest"
            }
          }
        ],
        "tags": [
          "Streaks"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TEAMS_CREATE": {
      "post": {
        "summary": "Create team",
        "description": "Create a team which other players can join",
        "operationId": "TeamCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to create a team.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamCreateRequest"
            }
          }
        ],
        "tags": [
          "Teams"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TEAMS_LIST": {
      "get": {
        "summary": "List teams",
        "description": "List one or more teams which the player can join",
        "operationId": "GetTeams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TeamList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "cursor",
            "description": "An optional cursor used to get the next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "description": "The optional location filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "An optional limit on how many results are returned. Defaults to 10.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Teams"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TEAMS_SEARCH": {
      "get": {
        "summary": "Search teams",
        "description": "Search for a team by name or optional short code",
        "operationId": "SearchTeams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TeamList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "The search term(s) passed in by the user.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "An optional limit on how many results are returned. Defaults to 10.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "langTag",
            "description": "Additionally search by language, if specified.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Teams"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TEAMS_WRITE_CHAT_MESSAGE": {
      "post": {
        "summary": "Write team chat message",
        "description": "Write a chat message to the Team's chat channel",
        "operationId": "TeamWriteChatMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ChannelMessageAck"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to write a chat message to the channel for a team the user is part of.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamWriteChatMessageRequest"
            }
          }
        ],
        "tags": [
          "Teams"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_ABANDON": {
      "post": {
        "summary": "Abandon tutorial",
        "description": "Abandon a tutorial that is currently in progress",
        "operationId": "TutorialAbandon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Tutorial"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to abandon a tutorial.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TutorialAbandonRequest"
            }
          }
        ],
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_ACCEPT": {
      "post": {
        "summary": "Accept tutorial",
        "description": "Accept an offer to step through a tutorial",
        "operationId": "TutorialAccept",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Tutorial"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to accept a tutorial.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TutorialAcceptRequest"
            }
          }
        ],
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_DECLINE": {
      "post": {
        "summary": "Decline tutorial",
        "description": "Decline an offer to step through a tutorial",
        "operationId": "TutorialDecline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Tutorial"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to decline a tutorial.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TutorialDeclineRequest"
            }
          }
        ],
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_GET": {
      "get": {
        "summary": "Get tutorials",
        "description": "Get the tutorials and current progress step for the player",
        "operationId": "TutorialsGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TutorialList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_RESET": {
      "post": {
        "summary": "Reset tutorial",
        "description": "Reset a tutorial to allow it to be started again",
        "operationId": "TutorialReset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TutorialList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to reset the state of one or more tutorials.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TutorialResetRequest"
            }
          }
        ],
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_TUTORIALS_UPDATE": {
      "post": {
        "summary": "Update tutorial progress",
        "description": "Update the current progress step in the tutorial by ID",
        "operationId": "TutorialUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/TutorialList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to update a tutorial.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TutorialUpdateRequest"
            }
          }
        ],
        "tags": [
          "Tutorials"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_CLAIM": {
      "post": {
        "summary": "Claim unlockable",
        "description": "Claim an unlockable whose start timer has completed or completion was fast tracked with a purchase",
        "operationId": "UnlockablesClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesReward"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request body for interacting with a specific unlockable.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_CREATE": {
      "post": {
        "summary": "Create unlockable",
        "description": "Create a random unlockable to assign to a slot (or overflow) unless there are no slots",
        "operationId": "UnlockablesCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_GET": {
      "get": {
        "summary": "Get unlockables",
        "description": "Get the unlockables which are currently in progress for the player",
        "operationId": "UnlockablesGet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_PURCHASE_SLOT": {
      "post": {
        "summary": "Purchase unlockable slot",
        "description": "Purchase a new slot to be used to store unlockables",
        "operationId": "UnlockablesPurchaseSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_PURCHASE_UNLOCK": {
      "post": {
        "summary": "Purchase unlockable completion",
        "description": "Purchase an unlockable with soft currency based on the remainder cost calculated by the offset left to wait",
        "operationId": "UnlockablesPurchaseUnlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request body for interacting with a specific unlockable.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_QUEUE_ADD": {
      "post": {
        "summary": "Add unlockables to queue",
        "description": "Add some set of unlockables to the unlock queue",
        "operationId": "UnlockablesQueueAdd",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to add a set of unlockables to the unlock queue.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesQueueAddRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_QUEUE_REMOVE": {
      "post": {
        "summary": "Remove unlockables from queue",
        "description": "Remove some set of unlockables from the unlock queue",
        "operationId": "UnlockablesQueueRemove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to remove a set of unlockables from the unlock queue.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesQueueRemoveRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_QUEUE_SET": {
      "post": {
        "summary": "Set unlockables queue",
        "description": "Replace the unlock queue with the given set of unlockables",
        "operationId": "UnlockablesQueueSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to replace the unlock queue with the given set of unlockables.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesQueueSetRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/RPC_ID_UNLOCKABLES_UNLOCK_START": {
      "post": {
        "summary": "Start unlockable timer",
        "description": "Start the unlock timer for an unlockable in the specified slot",
        "operationId": "UnlockablesUnlockStart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UnlockablesList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request body for interacting with a specific unlockable.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockablesRequest"
            }
          }
        ],
        "tags": [
          "Unlockables"
        ]
      }
    },
    "/v2/rpc/_internal/force_auction_list_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure AuctionListRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceAuctionListRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to list available auctions, optionally filtered based on given criteria.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuctionListRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_challenge_get_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure ChallengeGetRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceChallengeGetRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeGetRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_challenge_list_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure ChallengeListRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceChallengeListRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Retrieve available challenge leaderboards.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeListRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_event_leaderboard_list_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure EventLeaderboardList is in Swagger schema. Do not use.",
        "operationId": "_ForceEventLeaderboardListInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Retrieve available event leaderboards.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventLeaderboardList"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_inventory_list_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure InventoryListRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceInventoryListRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request all inventory items in the economy.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryListRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_sync_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure SyncRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceSyncRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Input for an offline state sync operation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_team_list_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure TeamListRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceTeamListRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to list teams which a user can join.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamListRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/_internal/force_team_search_request_schema": {
      "post": {
        "summary": "Internal schema helper",
        "description": "Internal endpoint to ensure TeamSearchRequest is in Swagger schema. Do not use.",
        "operationId": "_ForceTeamSearchRequestInSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A request to search for teams which the user wants to join.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamSearchRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/v2/rpc/ping": {
      "get": {
        "summary": "Ping server",
        "description": "Simple ping endpoint for health checks. Call with: http://localhost:7350/v2/rpc/ping?http_key=defaulthttpkey\u0026unwrap=true",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "tags": [
          "System"
        ]
      }
    }
  },
  "definitions": {
    "Achievement": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "The category to group the achievement together with others."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for when the achievement reward was claimed, or zero if unclaimed."
        },
        "totalClaimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for when the achievement total reward was claimed, or zero if unclaimed."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The count of the achievement."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for the current server time."
        },
        "description": {
          "type": "string",
          "description": "A description of the achievement. May be an i18n code."
        },
        "expireTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this achievement will expire. This may be before its next reset. A zero means it does not expire."
        },
        "id": {
          "type": "string",
          "description": "The ID of the achievement."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "The maximum count of the achievement."
        },
        "name": {
          "type": "string",
          "description": "The name of the achievement. May be an i18n code."
        },
        "preconditionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDs which are a precondition on the progress to be made on this achievement."
        },
        "resetTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this achievement will reset."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available reward and its probabilities."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The outcome (rolled) reward for the achievement."
        },
        "availableTotalReward": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available reward and its probabilities for the total completion of the achievement, if any."
        },
        "totalReward": {
          "$ref": "#/definitions/Reward",
          "description": "The outcome (rolled) reward for the total completion of the achievement, if any."
        },
        "subAchievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SubAchievement"
          },
          "description": "The sub-achievements for this achievement, if any."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "autoClaim": {
          "type": "boolean",
          "description": "Whether the achievement reward will be given automatically upon completion."
        },
        "autoClaimTotal": {
          "type": "boolean",
          "description": "Whether the achievement total reward will be given automatically upon completing this and all sub-achievements."
        },
        "autoReset": {
          "type": "boolean",
          "description": "Whether the achievement will reset after completion."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this achievement will allow updates. This may be before its next reset. A zero means it is immediately available."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this achievement will allow updates. This may be before its next reset. A zero means it does not end."
        }
      },
      "description": "An achievement which is a numeric task which can be unlocked and has an optional reward."
    },
    "AchievementList": {
      "type": "object",
      "properties": {
        "achievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Achievement"
          },
          "description": "The one off achievements which can be progressed or are unlocked by the user alongside all on the server."
        },
        "repeatAchievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Achievement"
          },
          "description": "The repeat achievements which can be progressed or are unlocked by the user alongside all on the server."
        }
      },
      "description": "The achievements returned by the server."
    },
    "AchievementsClaimRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of achievement IDs to claim."
        },
        "claimTotalReward": {
          "type": "boolean",
          "description": "Whether or not to claim the total reward as well, if available."
        }
      },
      "description": "Claim rewards with one or more achievement on the server."
    },
    "AchievementsUpdateAck": {
      "type": "object",
      "properties": {
        "achievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Achievement"
          },
          "description": "The one off achievements which can be progressed or are unlocked by the user."
        },
        "repeatAchievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Achievement"
          },
          "description": "The repeat achievements which can be progressed or are unlocked by the user."
        }
      },
      "description": "A response when an achievements update is acknowledged by the server."
    },
    "AchievementsUpdateRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of achievement IDs to progress."
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "description": "The amount of progress to increment on the achievements."
        },
        "achievements": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Achievements with different amounts."
        }
      },
      "description": "Update progress on one or more achievements on the server."
    },
    "ActiveRewardModifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the reward content to modify."
        },
        "type": {
          "type": "string",
          "description": "The type of reward content to modify."
        },
        "operator": {
          "type": "string",
          "description": "The operator to apply."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The value to apply. Its behavior depends on the operator."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The start time when this reward modifier was activated."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The time when this reward modifier will expire."
        }
      },
      "description": "A reward modifier that is currently active."
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "Auction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this auction."
        },
        "userId": {
          "type": "string",
          "description": "Identifier of the user that created this auction."
        },
        "reward": {
          "$ref": "#/definitions/AuctionReward",
          "description": "Item(s) being auctioned."
        },
        "fee": {
          "$ref": "#/definitions/AuctionFee",
          "description": "Fees associated, to be deducted when the creator claims the winning bid."
        },
        "version": {
          "type": "string",
          "description": "Version hash of this auction data, used to ensure operations act on latest known state."
        },
        "bid": {
          "$ref": "#/definitions/AuctionBid",
          "description": "Current highest bid, if any."
        },
        "bidNext": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Minimum next bid amount."
        },
        "durationSec": {
          "type": "string",
          "format": "int64",
          "description": "Auction duration in seconds, including any extensions."
        },
        "originalDurationSec": {
          "type": "string",
          "format": "int64",
          "description": "Original auction duration in seconds, not counting any extension time."
        },
        "extensionAddedSec": {
          "type": "string",
          "format": "int64",
          "description": "Additional time added so far to the original duration."
        },
        "extensionThresholdSec": {
          "type": "string",
          "format": "int64",
          "description": "Threshold before end of auction where a bid would extend the time."
        },
        "extensionSec": {
          "type": "string",
          "format": "int64",
          "description": "Extra time that would be added if a bid is placed within the threshold before the auction ends."
        },
        "extensionMaxSec": {
          "type": "string",
          "format": "int64",
          "description": "Maximum total number of seconds the auction can be extended by."
        },
        "extensionRemainingSec": {
          "type": "string",
          "format": "int64",
          "description": "Extra time still available."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was created."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the current bid was updated, for example by placing a new bid."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction starts."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction ends."
        },
        "originalEndTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was originally intended to end, not counting extensions."
        },
        "cancelTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the auction was cancelled, if any."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The current UNIX time (for gRPC clients) or ISO string (for REST clients) on the server."
        },
        "ownerClaimSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the owner claimed the successful bid amount."
        },
        "winnerClaimSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the winning bidder claimed the auction reward."
        },
        "hasStarted": {
          "type": "boolean",
          "description": "Indicates if the auction has started from the server perspective."
        },
        "hasEnded": {
          "type": "boolean",
          "description": "Indicates if the auction has ended from the server perspective."
        },
        "canBid": {
          "type": "boolean",
          "description": "Indicates if the caller can bid on this auction."
        },
        "canClaim": {
          "type": "boolean",
          "description": "Indicates if the caller can claim a reward from this auction, either the reward or winning bid."
        },
        "canCancel": {
          "type": "boolean",
          "description": "Indicates if the auction can be cancelled by its creator."
        },
        "bidFirst": {
          "$ref": "#/definitions/AuctionBid",
          "description": "First bid placed on this auction."
        },
        "bidHistory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuctionBid"
          },
          "description": "Most recent set of bids placed on this auction, ordered from newest to oldest retained."
        }
      },
      "description": "An individual auction listing."
    },
    "AuctionBid": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID of the bidder."
        },
        "bid": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Amount(s) placed as a bid."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the bid was placed."
        }
      },
      "description": "Represents a bid on an auction."
    },
    "AuctionBidAmount": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Currencies required or placed as part of the bid."
        }
      },
      "description": "Bid amount associated with an auction."
    },
    "AuctionBidRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique auction identifier to bid on."
        },
        "version": {
          "type": "string",
          "description": "The last seen version hash of the auction."
        },
        "bid": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Bid amounts to place, must at least match the minimum next bid."
        }
      },
      "description": "Request to place a bid on an active auction."
    },
    "AuctionCancel": {
      "type": "object",
      "properties": {
        "auction": {
          "$ref": "#/definitions/Auction",
          "description": "Auction that was just cancelled."
        },
        "reward": {
          "$ref": "#/definitions/AuctionReward",
          "description": "Reward(s) that were successfully refunded to the original auction creator."
        }
      },
      "description": "Result of cancelling an auction."
    },
    "AuctionCancelRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique auction identifier to cancel."
        }
      },
      "description": "Request to cancel an active auction."
    },
    "AuctionClaimBid": {
      "type": "object",
      "properties": {
        "auction": {
          "$ref": "#/definitions/Auction",
          "description": "Auction that was just claimed."
        },
        "reward": {
          "$ref": "#/definitions/AuctionReward",
          "description": "Reward(s) that were successfully claimed by the winning bidder."
        }
      },
      "description": "Result of claiming an auction as the winning bidder."
    },
    "AuctionClaimBidRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique auction identifier to claim."
        }
      },
      "description": "Request to claim a successful auction by either the winning bidder."
    },
    "AuctionClaimCreated": {
      "type": "object",
      "properties": {
        "auction": {
          "$ref": "#/definitions/Auction",
          "description": "Auction that was just claimed."
        },
        "reward": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Reward(s) that were successfully claimed by the creator."
        },
        "fee": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Fee(s) that were paid by the creator."
        },
        "returnedItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InventoryItem"
          },
          "description": "Items returned in the event of a failed auction."
        }
      },
      "description": "Result of claiming an auction as the creator."
    },
    "AuctionClaimCreatedRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique auction identifier to claim."
        }
      },
      "description": "Request to claim a successful auction by either the creator."
    },
    "AuctionCreateRequest": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string",
          "description": "Auction template to use."
        },
        "conditionId": {
          "type": "string",
          "description": "Auction condition set to use."
        },
        "instanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Item instance(s) to list in the auction."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the auction should start, omit to start immediately."
        }
      },
      "description": "Request to create a new auction."
    },
    "AuctionFee": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "format": "double",
          "description": "Percentage-based fee value."
        },
        "fixed": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Fixed fee amount."
        }
      },
      "description": "Fee structure associated with an auction, which will be deducted on completion."
    },
    "AuctionList": {
      "type": "object",
      "properties": {
        "auctions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Auction"
          },
          "description": "Auctions matching the requested filters."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor to fetch more results, or empty if there are no more."
        }
      },
      "description": "A list of auctions filtered by some initial request criteria."
    },
    "AuctionListBidsRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of auctions to return in a single response."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to use for retrieving the next page of results."
        }
      },
      "description": "Request to retrieve a list of auctions the user has bid on."
    },
    "AuctionListCreatedRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of auctions to return in a single response."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to use for retrieving the next page of results."
        }
      },
      "description": "Request to retrieve a list of auctions the user has created."
    },
    "AuctionListRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Formatted filter query."
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom sort criteria."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of auctions to return in a single response."
        },
        "cursor": {
          "type": "string",
          "description": "Cursor to use for retrieving the next page of results."
        }
      },
      "description": "Request to list available auctions, optionally filtered based on given criteria."
    },
    "AuctionReward": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InventoryItem"
          },
          "description": "Items being sold as part of a given auction listing."
        }
      },
      "description": "The content(s) of an auction."
    },
    "AuctionTemplate": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Item identifiers that can be listed using this auction template."
        },
        "itemSets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Item sets that can be listed using this auction template."
        },
        "conditions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuctionTemplateCondition"
          },
          "description": "Condition configurations available."
        },
        "bidHistoryCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of historic bids that will be kept."
        }
      },
      "description": "An individually usable auction template."
    },
    "AuctionTemplateCondition": {
      "type": "object",
      "properties": {
        "durationSec": {
          "type": "string",
          "format": "int64",
          "description": "Number of seconds the auction will be available for."
        },
        "listingCost": {
          "$ref": "#/definitions/AuctionTemplateConditionListingCost",
          "description": "Cost to be paid on creating the auction listing, if any."
        },
        "bidStart": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Minimum starting bid."
        },
        "bidIncrement": {
          "$ref": "#/definitions/AuctionTemplateConditionBidIncrement",
          "description": "Minimum increment between bids."
        },
        "extensionThresholdSec": {
          "type": "string",
          "format": "int64",
          "description": "How close to auction end should it be extended if a new bid arrives."
        },
        "extensionSec": {
          "type": "string",
          "format": "int64",
          "description": "How many seconds at a time will be added when extending."
        },
        "extensionMaxSec": {
          "type": "string",
          "format": "int64",
          "description": "How many seconds total may be added as extension."
        },
        "fee": {
          "$ref": "#/definitions/AuctionFee",
          "description": "Auction fee the creator will pay out of the winning bid amount, if any."
        }
      },
      "description": "A condition set as part of an auction template."
    },
    "AuctionTemplateConditionBidIncrement": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "format": "double",
          "description": "Percentage-based increment value."
        },
        "fixed": {
          "$ref": "#/definitions/AuctionBidAmount",
          "description": "Fixed increment amount."
        }
      },
      "description": "Minimum increment required between bids."
    },
    "AuctionTemplateConditionListingCost": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Currencies cost, if any."
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Inventory items cost, if any."
        },
        "energies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Energies cost, if any."
        }
      },
      "description": "Cost to be paid for listing an auction under this config condition."
    },
    "AuctionTemplates": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuctionTemplate"
          },
          "description": "All available auction templates, keyed by an unique identifier."
        }
      },
      "description": "Set of all available auction templates."
    },
    "AvailableRewards": {
      "type": "object",
      "properties": {
        "guaranteed": {
          "$ref": "#/definitions/AvailableRewardsContents",
          "description": "The guaranteed contents to grant."
        },
        "weighted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AvailableRewardsContents"
          },
          "description": "The weighted contents to grant."
        },
        "maxRolls": {
          "type": "string",
          "format": "int64",
          "description": "The number of weighted reward contents to select from among the possibilities."
        },
        "totalWeight": {
          "type": "string",
          "format": "int64",
          "description": "The total weight that all weighted reward contents are calculated against. Auto calculated if set to 0 but can be\nset to a higher value to introduce a chance of a \"none\" reward."
        },
        "maxRepeatRolls": {
          "type": "string",
          "format": "int64",
          "description": "The maximum number of repeats of any given weighted reward."
        }
      },
      "description": "The available rewards and their probabilistic weights."
    },
    "AvailableRewardsContents": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AvailableRewardsItem"
          },
          "description": "All possible items from this particular reward."
        },
        "itemSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AvailableRewardsItemSet"
          },
          "description": "All possible item sets from this particular reward."
        },
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AvailableRewardsCurrency"
          },
          "description": "All possible currencies from this particular reward."
        },
        "energies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AvailableRewardsEnergy"
          },
          "description": "All possible energies from this particular reward."
        },
        "energyModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AvailableRewardsEnergyModifier"
          },
          "description": "All possible energy reward modifiers from this particular reward."
        },
        "rewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AvailableRewardsRewardModifier"
          },
          "description": "All reward modifiers from this particular reward."
        },
        "weight": {
          "type": "string",
          "format": "int64",
          "description": "The weight of the reward contents."
        }
      },
      "description": "The reward contents for available rewards."
    },
    "AvailableRewardsCurrency": {
      "type": "object",
      "properties": {
        "count": {
          "$ref": "#/definitions/RewardRangeInt64",
          "description": "The possible count of the currency."
        }
      },
      "description": "A possible currency reward."
    },
    "AvailableRewardsEnergy": {
      "type": "object",
      "properties": {
        "count": {
          "$ref": "#/definitions/RewardRangeInt32",
          "description": "The possible count of the energy."
        }
      },
      "description": "A possible energy reward."
    },
    "AvailableRewardsEnergyModifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the energy to modify."
        },
        "operator": {
          "type": "string",
          "description": "The operator of the energy modifier."
        },
        "value": {
          "$ref": "#/definitions/RewardRangeInt64",
          "description": "The value of the energy modifier."
        },
        "durationSec": {
          "$ref": "#/definitions/RewardRangeUInt64",
          "description": "The possible duration of the modifier."
        }
      },
      "description": "A possible energy reward."
    },
    "AvailableRewardsItem": {
      "type": "object",
      "properties": {
        "count": {
          "$ref": "#/definitions/RewardRangeInt64",
          "description": "The possible count of the reward."
        },
        "numericProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RewardRangeDouble"
          },
          "description": "The possible numeric properties of the reward."
        },
        "stringProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AvailableRewardsStringProperty"
          },
          "description": "The possible string properties of the reward."
        }
      },
      "description": "A possible item reward."
    },
    "AvailableRewardsItemSet": {
      "type": "object",
      "properties": {
        "count": {
          "$ref": "#/definitions/RewardRangeInt64",
          "description": "The number of items to draw from the set."
        },
        "maxRepeats": {
          "type": "string",
          "format": "int64",
          "description": "The number of repeat items that may be drawn from the set. Also includes the user's inventory."
        },
        "set": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Drawn items must exist in the intersection of these sets."
        }
      },
      "description": "A possible item reward."
    },
    "AvailableRewardsRewardModifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the reward item, currency, energy, or energy modifier to modify."
        },
        "type": {
          "type": "string",
          "description": "The type of reward content to modify."
        },
        "operator": {
          "type": "string",
          "description": "The operator of the modifier."
        },
        "value": {
          "$ref": "#/definitions/RewardRangeInt64",
          "description": "The value of the modifier."
        },
        "durationSec": {
          "$ref": "#/definitions/RewardRangeUInt64",
          "description": "The possible duration of the modifier."
        }
      },
      "description": "A possible modifier reward."
    },
    "AvailableRewardsStringProperty": {
      "type": "object",
      "properties": {
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AvailableRewardsStringPropertyOption"
          },
          "description": "The available string property options."
        },
        "totalWeight": {
          "type": "string",
          "format": "int64",
          "description": "The total weight from which the options are selected."
        }
      },
      "description": "A possible string property."
    },
    "AvailableRewardsStringPropertyOption": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "string",
          "format": "int64",
          "description": "The option weight."
        }
      },
      "description": "A possible string property option."
    },
    "Challenge": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Challenge ID."
        },
        "name": {
          "type": "string",
          "description": "The name of the challenge. May be an i18n code."
        },
        "description": {
          "type": "string",
          "description": "A description of the challenge. May be an i18n code."
        },
        "ascending": {
          "type": "boolean",
          "description": "Score ordering."
        },
        "operator": {
          "type": "string",
          "description": "Score submission operator."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the event starts."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Claim time, if any."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the event ends."
        },
        "rewardTiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ChallengeRewardTier"
          },
          "description": "The possible reward tiers for this instance of the challenge."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available reward and its probabilities.\n\nAvailable to Claim"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "size": {
          "type": "string",
          "format": "int64",
          "description": "Current participant count."
        },
        "maxSize": {
          "type": "string",
          "format": "int64",
          "description": "Maximum participant count."
        },
        "maxNumScore": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of score submissions per participant."
        },
        "scores": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ChallengeScore"
          },
          "description": "Participants and their scores."
        },
        "isActive": {
          "type": "boolean",
          "description": "Indicates if the event is still active, and scores can be submitted."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for the current server time."
        },
        "canClaim": {
          "type": "boolean",
          "description": "Whether the user can claim a reward."
        },
        "state": {
          "$ref": "#/definitions/ChallengeState",
          "description": "The state of the user participation in the challenge."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "A claimed reward, if any."
        },
        "category": {
          "type": "string",
          "description": "The category to group the event leaderboard together with others."
        },
        "open": {
          "type": "boolean",
          "description": "Whether the challenge is open to participants beyond the initial invitees or not."
        }
      },
      "description": "A challenge leaderboard, which is a collection of participants and their scores."
    },
    "ChallengeClaimRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge id."
        }
      },
      "description": "Request to claim a reward from a challenge, if available. It also culls the challenge once all rewards are claimed."
    },
    "ChallengeCreateRequest": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string",
          "description": "Challenge template ID."
        },
        "name": {
          "type": "string",
          "description": "The name of the challenge. May be an i18n code."
        },
        "description": {
          "type": "string",
          "description": "A description of the challenge. May be an i18n code."
        },
        "invitees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "UserIDs of the users to challenge."
        },
        "open": {
          "type": "boolean",
          "description": "Whether the challenged users have to accept the challenge or not."
        },
        "maxScores": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of scores a user can submit to the leaderboard."
        },
        "startDelaySec": {
          "type": "string",
          "format": "int64",
          "description": "Start time of the challenge. Set to 0 to start immediately."
        },
        "durationSec": {
          "type": "string",
          "format": "int64",
          "description": "Duration of the challenge. Set to 0 to have an unlimited challenge."
        },
        "maxParticipants": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of participants in the challenge."
        },
        "category": {
          "type": "string",
          "description": "Category of the challenge."
        }
      },
      "description": "Request to create a new challenge based on a template."
    },
    "ChallengeGetRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge leaderboard ID to get, and join if necessary/possible."
        },
        "withScores": {
          "type": "boolean",
          "description": "Whether or not the response should include scores, defaults to false."
        }
      }
    },
    "ChallengeInviteRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge id."
        },
        "invitees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Invitees."
        }
      },
      "description": "Request for the challenge creator to invite additional users to an ongoing challenge."
    },
    "ChallengeJoinRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge id."
        }
      },
      "description": "Request to join an ongoing challenge."
    },
    "ChallengeLeaveRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge id."
        }
      },
      "description": "Request to leave a challenge."
    },
    "ChallengeListRequest": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional filter of Event Leaderboard categories to list. If empty does not filter on category."
        },
        "withScores": {
          "type": "boolean",
          "description": "Whether or not the response should include scores, defaults to false."
        }
      },
      "description": "Retrieve available challenge leaderboards."
    },
    "ChallengeMaxMinPlayers": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "int64",
          "description": "The minimum number of players that can participate in the challenge."
        },
        "max": {
          "type": "string",
          "format": "int64",
          "description": "The maximum number of players that can participate in the challenge."
        }
      },
      "description": "The minimum and maximum number of players that can participate in the challenge."
    },
    "ChallengeMinMaxDuration": {
      "type": "object",
      "properties": {
        "minSec": {
          "type": "string",
          "format": "int64",
          "description": "The minimum duration of challenge."
        },
        "maxSec": {
          "type": "string",
          "format": "int64",
          "description": "The maximum duration of challenge."
        }
      },
      "description": "The minimum and maximum duration that can be set for the challenge."
    },
    "ChallengeRewardTier": {
      "type": "object",
      "properties": {
        "rankMax": {
          "type": "string",
          "format": "int64",
          "description": "The maximum rank (inclusive)."
        },
        "rankMin": {
          "type": "string",
          "format": "int64",
          "description": "The minimum rank (inclusive)."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards for this range."
        }
      },
      "description": "The reward tiers for the challenge."
    },
    "ChallengeScore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID."
        },
        "username": {
          "type": "string",
          "description": "Username."
        },
        "displayName": {
          "type": "string",
          "description": "Display name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "Avatar URL."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the user joined the challenge leaderboard."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the user last submitted a score."
        },
        "rank": {
          "type": "string",
          "format": "int64",
          "description": "Rank within the event leaderboard."
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "Score."
        },
        "subscore": {
          "type": "string",
          "format": "int64",
          "description": "Subscore."
        },
        "numScores": {
          "type": "string",
          "format": "int64",
          "description": "Number of score submissions."
        },
        "metadata": {
          "type": "string",
          "description": "Metadata."
        },
        "state": {
          "$ref": "#/definitions/ChallengeState",
          "description": "The state of the user participation in the challenge."
        }
      },
      "description": "A single participant entry to an event leaderboard."
    },
    "ChallengeSearchRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name of challenge to filter by."
        },
        "category": {
          "type": "string",
          "description": "Optional category of challenge to filter by."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of results to return."
        }
      },
      "description": "Request to search for open challenges to join."
    },
    "ChallengeState": {
      "type": "string",
      "enum": [
        "CHALLENGE_STATE_NONE",
        "CHALLENGE_STATE_INVITED",
        "CHALLENGE_STATE_JOINED",
        "CHALLENGE_STATE_CLAIMED",
        "CHALLENGE_STATE_DECLINED",
        "CHALLENGE_STATE_LEFT"
      ],
      "default": "CHALLENGE_STATE_NONE",
      "description": "The state of a user's participation in a challenge.\n\n - CHALLENGE_STATE_NONE: There is no applicable state\n - CHALLENGE_STATE_INVITED: The user has a pending invitation to the challenge.\n - CHALLENGE_STATE_JOINED: The challenge was accepted.\n - CHALLENGE_STATE_CLAIMED: The challenge was claimed.\n - CHALLENGE_STATE_DECLINED: The challenge was declined.\n - CHALLENGE_STATE_LEFT: The challenge was joined but later left."
    },
    "ChallengeSubmitScoreRequest": {
      "type": "object",
      "properties": {
        "challengeId": {
          "type": "string",
          "description": "Challenge ID."
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "Score."
        },
        "subscore": {
          "type": "string",
          "format": "int64",
          "description": "Subscore."
        },
        "metadata": {
          "type": "string",
          "description": "Metadata."
        }
      },
      "description": "Request to submit a score to an active challenge."
    },
    "ChallengeTemplate": {
      "type": "object",
      "properties": {
        "rewardTiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ChallengeRewardTier"
          },
          "description": "The possible reward tiers for this instance of the challenge."
        },
        "players": {
          "$ref": "#/definitions/ChallengeMaxMinPlayers",
          "description": "The min and max players of the challenge."
        },
        "duration": {
          "$ref": "#/definitions/ChallengeMinMaxDuration",
          "description": "The min and max duration that can be set for the challenge."
        },
        "startDelayMax": {
          "type": "string",
          "format": "int64",
          "description": "The maximum amount of delay before the challenge begins for participants."
        },
        "open": {
          "type": "boolean",
          "description": "Whether the challenge is invite-only or not."
        },
        "maxNumScore": {
          "type": "string",
          "format": "int64",
          "description": "The maximum number of scores that can be submitted to the challenge."
        },
        "ascending": {
          "type": "boolean",
          "description": "The ordering of the challenge scores."
        },
        "operator": {
          "type": "string",
          "description": "The operator of the challenge score submission."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        }
      },
      "description": "An individually usable challenge template."
    },
    "ChallengeTemplates": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ChallengeTemplate"
          },
          "description": "All available challenges templates, keyed by a unique identifier."
        }
      },
      "description": "Get all available challenge templates."
    },
    "ChallengesList": {
      "type": "object",
      "properties": {
        "challenges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Challenge"
          },
          "description": "Zero or more challenges."
        }
      },
      "description": "Several challenges the user has access to, resulting from a listing operation."
    },
    "ChannelMessageAck": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string",
          "description": "The channel the message was sent to."
        },
        "messageId": {
          "type": "string",
          "description": "The unique ID assigned to the message."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The code representing a message type or category."
        },
        "username": {
          "type": "string",
          "description": "Username of the message sender."
        },
        "createTime": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was created."
        },
        "updateTime": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was last updated."
        },
        "persistent": {
          "type": "boolean",
          "description": "True if the message was persisted to the channel's history, false otherwise."
        },
        "roomName": {
          "type": "string",
          "description": "The name of the chat room, or an empty string if this message was not sent through a chat room."
        },
        "groupId": {
          "type": "string",
          "description": "The ID of the group, or an empty string if this message was not sent through a group channel."
        },
        "userIdOne": {
          "type": "string",
          "description": "The ID of the first DM user, or an empty string if this message was not sent through a DM chat."
        },
        "userIdTwo": {
          "type": "string",
          "description": "The ID of the second DM user, or an empty string if this message was not sent through a DM chat."
        }
      },
      "description": "A receipt reply from a channel message send operation."
    },
    "DevicePrefsRequest": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "The device ID to set."
        },
        "pushTokenAndroid": {
          "type": "string",
          "description": "The push token from the Android device. This or 'push_token_ios' must be set."
        },
        "pushTokenIos": {
          "type": "string",
          "description": "The push token from the iOS device. This or 'push_token_android' must be set."
        },
        "preferences": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "Additional device preferences for push events. Must be owned by the user."
        }
      },
      "description": "Update or create the mobile push device tokens and preferences."
    },
    "EconomyDonation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user that owns this donation."
        },
        "claimCount": {
          "type": "string",
          "format": "int64",
          "description": "The count of how much of the donation has already been claimed."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The count of how much has been contributed by users."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for the current time."
        },
        "description": {
          "type": "string",
          "description": "The description for the donation, if any. May be an i18n code."
        },
        "expireTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the donation expires."
        },
        "id": {
          "type": "string",
          "description": "The ID of the donation."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "The maximum \"units\" which can be collected."
        },
        "name": {
          "type": "string",
          "description": "The name for the donation, if any. May be an i18n code."
        },
        "recipientAvailableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The configuration for rewards granted to the recipient of the donation."
        },
        "userContributionMaxCount": {
          "type": "string",
          "format": "int64",
          "description": "The maximum number of donations per contributor."
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EconomyDonationContributor"
          },
          "description": "The contributors to this donation, if any."
        },
        "contributorAvailableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The configuration for rewards granted to the contributor of the donation."
        },
        "recipientRewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Reward"
          },
          "description": "All rewards claimed by the recipient of this donation."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        }
      },
      "description": "A donation for a user."
    },
    "EconomyDonationAck": {
      "type": "object",
      "properties": {
        "created": {
          "type": "boolean",
          "description": "True if the donation is newly created."
        },
        "donation": {
          "$ref": "#/definitions/EconomyDonation",
          "description": "The donation requested which may already be active or newly created."
        }
      },
      "description": "An acknowledgement of the idempotent creation of a donation for a user."
    },
    "EconomyDonationClaimRequest": {
      "type": "object",
      "properties": {
        "donationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The donation IDs to claim."
        },
        "donations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EconomyDonationClaimRequestDetails"
          },
          "description": "A mapped set of donations to donors to claim."
        }
      },
      "description": "Request to claim one or more donations."
    },
    "EconomyDonationClaimRequestDetails": {
      "type": "object",
      "properties": {
        "donors": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "List of donor IDs to claim and amount to claim from each, or empty to claim all available."
        }
      },
      "description": "Information about a specific donation claim."
    },
    "EconomyDonationClaimRewards": {
      "type": "object",
      "properties": {
        "donations": {
          "$ref": "#/definitions/EconomyDonationsList",
          "description": "All active donations for the user."
        },
        "claimedRewards": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RewardList"
          },
          "description": "The rewards from this particular claim."
        }
      },
      "description": "Response to claiming one or more donations."
    },
    "EconomyDonationContributor": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID that contributed."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The amount they've donated."
        },
        "claimCount": {
          "type": "string",
          "format": "int64",
          "description": "The amount that has been claimed by the recipient already."
        }
      },
      "description": "A contributor to this donation."
    },
    "EconomyDonationGetRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The user IDs to get donations for."
        }
      },
      "description": "Request to get donations for one or more users."
    },
    "EconomyDonationGiveRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID who receives the donation."
        },
        "donationId": {
          "type": "string",
          "description": "The donation ID to give into."
        }
      },
      "description": "Request to give a donation to a user."
    },
    "EconomyDonationRequest": {
      "type": "object",
      "properties": {
        "donationId": {
          "type": "string",
          "description": "The donation ID to request, defined on the server."
        }
      },
      "description": "Request a new donation."
    },
    "EconomyDonationsByUserList": {
      "type": "object",
      "properties": {
        "userDonations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EconomyDonationsList"
          },
          "description": "The active donations grouped by user ID."
        }
      },
      "description": "A map of active donations keyed by user ID."
    },
    "EconomyDonationsList": {
      "type": "object",
      "properties": {
        "donations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EconomyDonation"
          },
          "description": "The active donations for a set of users."
        }
      },
      "description": "A list of active donations returned for some set of users."
    },
    "EconomyGrantRequest": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The currencies to grant."
        },
        "rewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RewardModifier"
          },
          "description": "The reward modifiers to grant."
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Any items to grant."
        }
      },
      "description": "Represents a request to grant rewards to the user."
    },
    "EconomyList": {
      "type": "object",
      "properties": {
        "storeItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EconomyListStoreItem"
          },
          "description": "The list of store items."
        },
        "placements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EconomyListPlacement"
          },
          "description": "The list of placements."
        },
        "donations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EconomyDonation"
          },
          "description": "The set of active donations for the current user."
        },
        "activeRewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ActiveRewardModifier"
          },
          "description": "The list of active reward modifiers."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Current server time."
        }
      },
      "description": "The response data with the available store items."
    },
    "EconomyListPlacement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the placement."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The reward obtained from this placement."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards obtained from this placement."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        }
      },
      "description": "Represents an available ad placement."
    },
    "EconomyListRequest": {
      "type": "object",
      "properties": {
        "storeType": {
          "$ref": "#/definitions/EconomyStoreType",
          "description": "The game client's store type."
        }
      },
      "description": "Represents a request to retrieve available store items."
    },
    "EconomyListStoreItem": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "The category to group the item together with others."
        },
        "cost": {
          "$ref": "#/definitions/EconomyListStoreItemCost",
          "description": "The cost of the item."
        },
        "description": {
          "type": "string",
          "description": "A description of the item. May be an i18n code."
        },
        "id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "name": {
          "type": "string",
          "description": "The name of the item. May be an i18n code."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards in this store item."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "unavailable": {
          "type": "boolean",
          "description": "The item is visible, but if true it's unavailable to purchase by the player."
        }
      },
      "description": "Represents an individual available store items."
    },
    "EconomyListStoreItemCost": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The virtual currencies, if any."
        },
        "sku": {
          "type": "string",
          "description": "The required purchase SKU, if any."
        }
      },
      "description": "The cost(s) associated with a store item."
    },
    "EconomyPlacementStartRequest": {
      "type": "object",
      "properties": {
        "placementId": {
          "type": "string",
          "description": "The identifier to start a reward for."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional metadata to associate with the placement."
        }
      },
      "description": "Request to start a placement reward."
    },
    "EconomyPlacementStatus": {
      "type": "object",
      "properties": {
        "rewardId": {
          "type": "string",
          "description": "The reward ID."
        },
        "placementId": {
          "type": "string",
          "description": "The placement ID."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the placement was created."
        },
        "completeTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the placement was completed."
        },
        "success": {
          "type": "boolean",
          "description": "If completed, was it successful."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The reward for completing the placement, if it was autocompleted as part of the status request."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata associated with the placement, if any."
        }
      },
      "description": "The current status of a placement reward."
    },
    "EconomyPlacementStatusRequest": {
      "type": "object",
      "properties": {
        "rewardId": {
          "type": "string",
          "description": "The reward ID to check."
        },
        "placementId": {
          "type": "string",
          "description": "The placement ID to check, will be used if reward ID is not supplied."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The check attempt counter, optional."
        }
      },
      "description": "Request to retrieve status af a specific placement instance by reward ID."
    },
    "EconomyPurchaseAck": {
      "type": "object",
      "properties": {
        "wallet": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Updated wallet data, if changed."
        },
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "Update inventory data, if changed."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "Reward, if any."
        },
        "isSandboxPurchase": {
          "type": "boolean",
          "title": "Was the purchase a sandbox purchase?"
        }
      },
      "description": "Response from purchasing currencies and/or items.\nContains updated wallet and inventory data, if changed.\nContains reward granted, if any.\nContains indication of whether or not the purchase was a sandbox purchase."
    },
    "EconomyPurchaseIntentRequest": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "description": "An item's ID."
        },
        "storeType": {
          "$ref": "#/definitions/EconomyStoreType",
          "description": "The store type."
        },
        "sku": {
          "type": "string",
          "description": "The SKU code, if any."
        }
      },
      "description": "Request to create a store item purchase intent."
    },
    "EconomyPurchaseRequest": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "description": "An item's ID."
        },
        "storeType": {
          "$ref": "#/definitions/EconomyStoreType",
          "description": "The store type."
        },
        "receipt": {
          "type": "string",
          "description": "The IAP receipt purchased."
        }
      },
      "description": "Request to purchase a particular store item."
    },
    "EconomyPurchaseRestoreRequest": {
      "type": "object",
      "properties": {
        "storeType": {
          "$ref": "#/definitions/EconomyStoreType",
          "description": "The store type."
        },
        "receipts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IAP receipts to restore."
        }
      },
      "description": "Request to restore a set of purchases."
    },
    "EconomyStoreType": {
      "type": "string",
      "enum": [
        "ECONOMY_STORE_TYPE_UNSPECIFIED",
        "ECONOMY_STORE_TYPE_APPLE_APPSTORE",
        "ECONOMY_STORE_TYPE_GOOGLE_PLAY",
        "ECONOMY_STORE_TYPE_FBINSTANT",
        "ECONOMY_STORE_TYPE_DISCORD"
      ],
      "default": "ECONOMY_STORE_TYPE_UNSPECIFIED",
      "description": "The store types supported by the Economy system.\n\n - ECONOMY_STORE_TYPE_UNSPECIFIED: Unspecified. Defaults to Apple.\n - ECONOMY_STORE_TYPE_APPLE_APPSTORE: Apple App Store.\n - ECONOMY_STORE_TYPE_GOOGLE_PLAY: Google Play.\n - ECONOMY_STORE_TYPE_FBINSTANT: Facebook Instant games.\n - ECONOMY_STORE_TYPE_DISCORD: Discord Store."
    },
    "EconomyUpdateAck": {
      "type": "object",
      "properties": {
        "wallet": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Updated wallet data, if changed."
        },
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "Update inventory data, if changed."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "Reward, if any."
        },
        "activeRewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ActiveRewardModifier"
          },
          "description": "Updated active reward modifiers, if changed."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Current server time."
        }
      },
      "description": "Response from granting currencies, reward modifiers, and/or items.\nContains updated wallet and inventory data, if changed.\nContains reward granted, if any.\nContains active reward modifiers, if changed."
    },
    "Energy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique energy identifier."
        },
        "current": {
          "type": "integer",
          "format": "int32",
          "description": "The current amount."
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum amount."
        },
        "refill": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of energy granted per refill."
        },
        "refillSec": {
          "type": "string",
          "format": "int64",
          "description": "Number of seconds between refills."
        },
        "nextRefillTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the count will increase, if it is not at max already."
        },
        "maxRefillTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the count will reach max, if it is not at max already."
        },
        "startRefillTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the count started filling, if it is not at max already."
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EnergyModifier"
          },
          "description": "The modifiers, if any."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards, if any."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The current UNIX timestamp in seconds."
        }
      },
      "description": "Information about a single energy type."
    },
    "EnergyGrantRequest": {
      "type": "object",
      "properties": {
        "amounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Energy amounts to grant."
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RewardEnergyModifier"
          },
          "description": "Energy modifiers to apply, if any."
        }
      },
      "description": "Request to grant one or more energy amounts."
    },
    "EnergyList": {
      "type": "object",
      "properties": {
        "energies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Energy"
          },
          "description": "Energy types keyed on the energy identifier."
        }
      },
      "description": "One or more energy values for a user."
    },
    "EnergyModifier": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "description": "The modifier operator."
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "The modifier value, if applicable."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the modifier became active."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the modifier ends."
        }
      },
      "description": "A modifier that may change energy behaviour."
    },
    "EnergySpendRequest": {
      "type": "object",
      "properties": {
        "amounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Energy amounts to spend."
        }
      },
      "description": "Request to spend one or more energy amounts."
    },
    "EnergySpendReward": {
      "type": "object",
      "properties": {
        "energies": {
          "$ref": "#/definitions/EnergyList",
          "description": "The updated list of energy."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The cumulative reward of spending the energies."
        }
      },
      "description": "Request to spend one or more energy amounts."
    },
    "EventLeaderboard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID."
        },
        "name": {
          "type": "string",
          "description": "The name of the event leaderboard. May be an i18n code."
        },
        "description": {
          "type": "string",
          "description": "A description of the event leaderboard. May be an i18n code."
        },
        "category": {
          "type": "string",
          "description": "The category to group the event leaderboard together with others."
        },
        "ascending": {
          "type": "boolean",
          "description": "Score ordering."
        },
        "operator": {
          "type": "string",
          "description": "Score submission operator."
        },
        "tier": {
          "type": "integer",
          "format": "int32",
          "description": "The tier of this instance of the event leaderboard."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the event starts."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the event ends."
        },
        "expiryTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the event expires."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available reward and its probabilities."
        },
        "rewardTiers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EventLeaderboardRewardTiers"
          },
          "description": "The possible reward tiers for this instance of the event leaderboard, based on its current tier."
        },
        "changeZones": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EventLeaderboardChangeZone"
          },
          "description": "Per-tier promotion/demotion change zones, if configured."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Claim time, if any."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The outcome (rolled) reward for the event leaderboard."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Current participant count."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "Maximum participant count."
        },
        "maxNumScore": {
          "type": "string",
          "format": "int64",
          "description": "Maximum number of score submissions per participant."
        },
        "scores": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EventLeaderboardScore"
          },
          "description": "Participants and their scores."
        },
        "isActive": {
          "type": "boolean",
          "description": "Indicates if the event is still active, and scores can be submitted."
        },
        "canClaim": {
          "type": "boolean",
          "description": "Indicates if the event is over and its reward can be claimed."
        },
        "canRoll": {
          "type": "boolean",
          "description": "Indicates if the event can be rolled to get a new set of opponents."
        },
        "matchmakerProperties": {
          "type": "object",
          "description": "Extra matchmaker properties for this cohort."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for the current server time."
        },
        "cohortId": {
          "type": "string",
          "description": "Cohort ID the user belongs to for this active phase."
        },
        "backingId": {
          "type": "string",
          "description": "Backing ID for underlying score tracking."
        }
      },
      "description": "Details about a specific event leaderboard."
    },
    "EventLeaderboardChangeZone": {
      "type": "object",
      "properties": {
        "promotion": {
          "type": "number",
          "format": "double",
          "description": "Percentage of cohort to promote, expressed in the range of 0.0 to 1.0."
        },
        "demotion": {
          "type": "number",
          "format": "double",
          "description": "Percentage of cohort to demote, expressed in the range of 0.0 to 1.0."
        },
        "demoteIdle": {
          "type": "boolean",
          "description": "Whether or not to always demote players that failed to submit a score at all."
        }
      },
      "description": "An event leaderboard's tier-specific promotion/demotion zones."
    },
    "EventLeaderboardClaim": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID to claim."
        }
      },
      "description": "Claim the available reward for an event leaderboard by ID."
    },
    "EventLeaderboardDebugFillRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID to fill."
        },
        "targetCount": {
          "type": "integer",
          "format": "int32",
          "description": "Optional target cohort size to fill to, otherwise fill to max cohort size."
        }
      }
    },
    "EventLeaderboardDebugRandomScoresRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID to update."
        },
        "min": {
          "type": "string",
          "format": "int64",
          "description": "Minimum score, inclusive."
        },
        "max": {
          "type": "string",
          "format": "int64",
          "description": "Maximum score, inclusive."
        },
        "operator": {
          "type": "integer",
          "format": "int32",
          "description": "Optional operator to use when updating scores."
        },
        "subscoreMin": {
          "type": "string",
          "format": "int64",
          "description": "Minimum subscore, inclusive."
        },
        "subscoreMax": {
          "type": "string",
          "format": "int64",
          "description": "Maximum subscore, inclusive."
        }
      },
      "description": "DEBUG. Payload describing scores to set for a cohort's participants."
    },
    "EventLeaderboardGet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID to get, and join if necessary/possible."
        }
      },
      "description": "Find and retrieve an event leaderboard by ID, automatically joining the event if necessary."
    },
    "EventLeaderboardList": {
      "type": "object",
      "properties": {
        "withScores": {
          "type": "boolean",
          "description": "Whether or not the response should include scores, defaults to false."
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional filter of Event Leaderboard categories to list. If empty does not filter on category."
        }
      },
      "description": "Retrieve available event leaderboards."
    },
    "EventLeaderboardRewardTier": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for this tier."
        },
        "rankMax": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum rank (inclusive)."
        },
        "rankMin": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum rank (inclusive)."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards for this range."
        },
        "tierChange": {
          "type": "integer",
          "format": "int32",
          "description": "Change in tier for this rank range."
        }
      },
      "description": "A reward range within a specific tier based on ranks."
    },
    "EventLeaderboardRewardTiers": {
      "type": "object",
      "properties": {
        "rewardTiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EventLeaderboardRewardTier"
          },
          "description": "Possible reward tiers."
        }
      },
      "description": "An event leaderboard's tier-specific set of rewards."
    },
    "EventLeaderboardRoll": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID to roll."
        }
      },
      "description": "Roll a new cohort for the specified event leaderboard."
    },
    "EventLeaderboardScore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID."
        },
        "username": {
          "type": "string",
          "description": "Username."
        },
        "displayName": {
          "type": "string",
          "description": "Display name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "Avatar URL."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the user joined the event leaderboard."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the user last submitted a score."
        },
        "rank": {
          "type": "string",
          "format": "int64",
          "description": "Rank within the event leaderboard."
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "Score."
        },
        "subscore": {
          "type": "string",
          "format": "int64",
          "description": "Subscore."
        },
        "numScores": {
          "type": "string",
          "format": "int64",
          "description": "Number of score submissions."
        },
        "metadata": {
          "type": "string",
          "description": "Metadata."
        }
      },
      "description": "A single participant entry to an event leaderboard."
    },
    "EventLeaderboardUpdate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event leaderboard ID."
        },
        "score": {
          "type": "string",
          "format": "int64",
          "description": "Score."
        },
        "subscore": {
          "type": "string",
          "format": "int64",
          "description": "Subscore."
        },
        "metadata": {
          "type": "string",
          "description": "Metadata."
        },
        "conditionalMetadataUpdate": {
          "type": "boolean",
          "description": "Update metadata only if score or subscore change."
        }
      },
      "description": "Submit a score to an event leaderboard."
    },
    "EventLeaderboards": {
      "type": "object",
      "properties": {
        "eventLeaderboards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EventLeaderboard"
          },
          "description": "Zero or more event leaderboards."
        }
      },
      "description": "Several event leaderboards the user has access to, resulting from a listing operation."
    },
    "Incentive": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the incentive."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "code": {
          "type": "string",
          "description": "Shareable incentive code."
        },
        "type": {
          "$ref": "#/definitions/IncentiveType",
          "description": "The type of the incentive."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Create time in UTC seconds."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Update time in UTC seconds."
        },
        "expiryTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Expiry time in UTC seconds."
        },
        "recipientRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "Available reward."
        },
        "senderRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "Sender reward."
        },
        "unclaimedRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Recipient user IDs for which the owner of the incentive has not yet claimed their sender reward."
        },
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Reward"
          },
          "description": "Sender rewards so far collected for this incentive."
        },
        "maxClaims": {
          "type": "string",
          "format": "int64",
          "description": "Max claims."
        },
        "claims": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IncentiveClaim"
          },
          "description": "Current user IDs that have claimed, and their outcomes."
        },
        "additionalProperties": {
          "type": "object",
          "description": "Additional properties."
        }
      },
      "description": "An incentive set up by a user."
    },
    "IncentiveClaim": {
      "type": "object",
      "properties": {
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "Reward granted."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Claim time in UTC seconds."
        }
      },
      "description": "The result of claiming an incentive."
    },
    "IncentiveInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the incentive."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "code": {
          "type": "string",
          "description": "Unique shareable incentive code."
        },
        "type": {
          "$ref": "#/definitions/IncentiveType",
          "description": "The type of the incentive."
        },
        "sender": {
          "type": "string",
          "description": "Incentive sender user ID."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "Available rewards that the caller can claim."
        },
        "canClaim": {
          "type": "boolean",
          "description": "Indicator if the caller can claim rewards."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "Reward that was granted."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Create time in UTC seconds."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Update time in UTC seconds."
        },
        "expiryTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Expiry time in UTC seconds."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Claim time in UTC seconds."
        }
      },
      "description": "An incentive claimant's view of a single incentive."
    },
    "IncentiveList": {
      "type": "object",
      "properties": {
        "incentives": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Incentive"
          },
          "description": "Incentives set up by a single user."
        }
      },
      "description": "A list of incentives set up by a user."
    },
    "IncentiveRecipientClaimRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The unique incentive code."
        }
      },
      "description": "Request by a potential incentive claimant to claim an incentive."
    },
    "IncentiveRecipientGetRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The unique incentive code."
        }
      },
      "description": "Request by a potential incentive claimant to view incentive information."
    },
    "IncentiveSenderClaimRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The unique incentive code."
        },
        "recipientIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The recipient ID(s) to claim for, or empty for all."
        }
      },
      "description": "Request by a user to claim rewards from an incentive they had set up."
    },
    "IncentiveSenderCreateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The incentive configuration ID."
        }
      },
      "description": "Request by a user to set up a new incentive."
    },
    "IncentiveSenderDeleteRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The unique incentive code."
        }
      },
      "description": "Request by a user to delete an incentive they had set up."
    },
    "IncentiveType": {
      "type": "string",
      "enum": [
        "INCENTIVE_TYPE_UNSPECIFIED",
        "INCENTIVE_TYPE_INVITE"
      ],
      "default": "INCENTIVE_TYPE_UNSPECIFIED",
      "description": "Types of incentives.\n\n - INCENTIVE_TYPE_UNSPECIFIED: Unspecified. Defaults to INVITE.\n - INCENTIVE_TYPE_INVITE: An invite with an associated incentive reward."
    },
    "Inventory": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InventoryItem"
          },
          "description": "The items in the player's inventory."
        }
      },
      "description": "The inventory in the economy or owned by user."
    },
    "InventoryConsumeRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Item ID amounts to consume, if any."
        },
        "overconsume": {
          "type": "boolean",
          "description": "Whether or not to allow overconsumption."
        },
        "instances": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Instance ID amounts to consume, if any."
        }
      },
      "description": "Request to consume some amount of items."
    },
    "InventoryConsumeRewards": {
      "type": "object",
      "properties": {
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "Updated inventory data, if changed."
        },
        "rewards": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RewardList"
          },
          "description": "Consume rewards by item ID, if any."
        },
        "instanceRewards": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RewardList"
          },
          "description": "Consume rewards by instance ID, if any."
        }
      },
      "description": "Updated inventory and rewards granted from consumption."
    },
    "InventoryGrantRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The items to grant."
        }
      },
      "description": "Represents a request to grant items to the user."
    },
    "InventoryItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "name": {
          "type": "string",
          "description": "The name of the item. May be an i18n code."
        },
        "description": {
          "type": "string",
          "description": "A description of the item. May be an i18n code."
        },
        "category": {
          "type": "string",
          "description": "The category to group the item together with others."
        },
        "itemSets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The sets the item is grouped into."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The current count of the item."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "The maximum count which can be owned for this item."
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether or not the item is stackable."
        },
        "consumable": {
          "type": "boolean",
          "description": "Whether or not the item is consumable."
        },
        "consumeAvailableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The configuration for the reward to grant for consumption."
        },
        "stringProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The properties with string values."
        },
        "numericProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "The properties with numeric values."
        },
        "ownedTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "A UNIX timestamp when the user acquired this item."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "A UNIX timestamp when the item was updated."
        },
        "instanceId": {
          "type": "string",
          "description": "The instance ID of the item, if any."
        }
      },
      "description": "A item owned by the current user."
    },
    "InventoryList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InventoryItem"
          },
          "description": "The inventory items from definitions and the user."
        }
      },
      "description": "Response for retrieving Inventory system data definitions."
    },
    "InventoryListRequest": {
      "type": "object",
      "properties": {
        "itemCategory": {
          "type": "string",
          "description": "The category for the items to filter for, or empty for all"
        }
      },
      "description": "Request all inventory items in the economy."
    },
    "InventoryUpdateAck": {
      "type": "object",
      "properties": {
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "Updated inventory data, if changed."
        }
      },
      "description": "Response from granting or purchasing items. This contains updated inventory data, if changed."
    },
    "InventoryUpdateItemProperties": {
      "type": "object",
      "properties": {
        "stringProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The properties with string values."
        },
        "numericProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "The properties with numeric values."
        }
      },
      "description": "The typed properties to update in an instanced inventory item."
    },
    "InventoryUpdateItemsRequest": {
      "type": "object",
      "properties": {
        "itemUpdates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InventoryUpdateItemProperties"
          },
          "description": "The item updates to action, keyed by item instance ID."
        }
      },
      "description": "Represents a request to update properties of instanced items."
    },
    "LeaderboardConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The leaderboard id."
        },
        "sortOrder": {
          "type": "string",
          "description": "The leaderboard sort order."
        },
        "operator": {
          "type": "string",
          "description": "The leaderboard operator."
        },
        "resetSchedule": {
          "type": "string",
          "description": "The leaderboard reset schedule."
        },
        "authoritative": {
          "type": "boolean",
          "description": "Whether the leaderboard is authoritative or not."
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of regional leaderboards of the leaderboard, if any."
        }
      },
      "description": "A leaderboard configuration."
    },
    "LeaderboardConfigList": {
      "type": "object",
      "properties": {
        "leaderboardConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/LeaderboardConfig"
          },
          "description": "The list of leaderboard configurations."
        }
      },
      "description": "A list of leaderboard configurations."
    },
    "NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "Progression": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the progression."
        },
        "name": {
          "type": "string",
          "description": "The name of the progression. May be an i18n code."
        },
        "description": {
          "type": "string",
          "description": "A description of the progression. May be an i18n code."
        },
        "category": {
          "type": "string",
          "description": "The category to group the progression together with others."
        },
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Current count, if any."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "unlocked": {
          "type": "boolean",
          "description": "Flag indicating unlock status."
        },
        "preconditions": {
          "$ref": "#/definitions/ProgressionPreconditionsBlock",
          "description": "All preconditions."
        },
        "unmetPreconditions": {
          "$ref": "#/definitions/ProgressionPreconditionsBlock",
          "description": "Unmet preconditions."
        }
      },
      "description": "A progression element which can be unlocked to access further progressions."
    },
    "ProgressionCost": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The items which will be deducted."
        },
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The currencies which will be deducted."
        }
      },
      "description": "The cost(s) associated with permanently unlocking a progression."
    },
    "ProgressionDelta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the progression."
        },
        "state": {
          "$ref": "#/definitions/ProgressionDeltaState",
          "description": "Potential state change."
        },
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Changes to counts, if any."
        },
        "preconditions": {
          "$ref": "#/definitions/ProgressionPreconditionsBlock",
          "description": "Changes to preconditions, if any."
        }
      },
      "description": "A change in a given progression, compared to a previously known state."
    },
    "ProgressionDeltaState": {
      "type": "string",
      "enum": [
        "PROGRESSION_DELTA_STATE_UNSPECIFIED",
        "PROGRESSION_DELTA_STATE_UNCHANGED",
        "PROGRESSION_DELTA_STATE_UNLOCKED",
        "PROGRESSION_DELTA_STATE_LOCKED"
      ],
      "default": "PROGRESSION_DELTA_STATE_UNSPECIFIED",
      "description": " - PROGRESSION_DELTA_STATE_UNSPECIFIED: Unspecified. Defaults to UNCHANGED.\n - PROGRESSION_DELTA_STATE_UNCHANGED: Progression unlock state has not changed.\n - PROGRESSION_DELTA_STATE_UNLOCKED: Progression was locked, it is now unlocked.\n - PROGRESSION_DELTA_STATE_LOCKED: Progression was unlocked, it is now locked."
    },
    "ProgressionGetRequest": {
      "type": "object",
      "properties": {
        "progressions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Progression"
          },
          "description": "Optional last known progressions state, keyed by progression ID"
        }
      },
      "description": "Request progressions for a user, optionally including previously seen state for delta calculations."
    },
    "ProgressionList": {
      "type": "object",
      "properties": {
        "progressions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Progression"
          },
          "description": "Progressions keyed by progression ID."
        },
        "deltas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ProgressionDelta"
          },
          "description": "Progression deltas keyed by progression ID."
        }
      },
      "description": "All or a filtered list of progressions for a user."
    },
    "ProgressionPreconditions": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Counts required."
        },
        "cost": {
          "$ref": "#/definitions/ProgressionCost",
          "description": "Purchase cost paid."
        },
        "progressions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Other progressions."
        },
        "achievements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Achievements."
        },
        "itemsMin": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Items with associated minimum counts."
        },
        "itemsMax": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Items with associated maximum counts."
        },
        "statsMin": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Stats with associated minimum values."
        },
        "statsMax": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Stats with associated maximum values."
        },
        "energyMin": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Energies with associated minimum counts."
        },
        "energyMax": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Energies with associated maximum counts."
        },
        "currencyMin": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Currencies with associated minimum counts."
        },
        "currencyMax": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Currencies with associated maximum counts."
        }
      },
      "description": "Preconditions associated with a progression."
    },
    "ProgressionPreconditionsBlock": {
      "type": "object",
      "properties": {
        "direct": {
          "$ref": "#/definitions/ProgressionPreconditions",
          "description": "Direct preconditions."
        },
        "operator": {
          "$ref": "#/definitions/ProgressionPreconditionsOperator",
          "description": "Operator for any nested block."
        },
        "nested": {
          "$ref": "#/definitions/ProgressionPreconditionsBlock",
          "description": "Nested block of preconditions, if any."
        }
      },
      "description": "A complex set of progression preconditions."
    },
    "ProgressionPreconditionsOperator": {
      "type": "string",
      "enum": [
        "PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED",
        "PROGRESSION_PRECONDITIONS_OPERATOR_AND",
        "PROGRESSION_PRECONDITIONS_OPERATOR_OR",
        "PROGRESSION_PRECONDITIONS_OPERATOR_XOR",
        "PROGRESSION_PRECONDITIONS_OPERATOR_NOT"
      ],
      "default": "PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED",
      "description": " - PROGRESSION_PRECONDITIONS_OPERATOR_UNSPECIFIED: Unspecified. Defaults to AND.\n - PROGRESSION_PRECONDITIONS_OPERATOR_AND: Both the direct preconditions and the nested block must be true.\n - PROGRESSION_PRECONDITIONS_OPERATOR_OR: Either the direct preconditions or the nested block must be true.\n - PROGRESSION_PRECONDITIONS_OPERATOR_XOR: Either the direct preconditions or the nested block must be true, but not both.\n - PROGRESSION_PRECONDITIONS_OPERATOR_NOT: The direct preconditions must be true, but the nested block must not be."
    },
    "ProgressionPurchaseRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the progression to permanently unlock."
        }
      },
      "description": "Request to permanently unlock a progression, if supported by that specific progression."
    },
    "ProgressionResetRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The progression IDs to reset."
        }
      },
      "description": "Request to reset progression progress."
    },
    "ProgressionUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the progression to update."
        },
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "One or more counts to add to the progression."
        }
      },
      "description": "Request to update a progression, if supported by that specific progression."
    },
    "RateAppRequest": {
      "type": "object",
      "properties": {
        "score": {
          "type": "integer",
          "format": "int64",
          "description": "The score given by the user. Above zero values indicate a positive review."
        },
        "message": {
          "type": "string",
          "description": "The message about the reason for their score. May be blank."
        }
      },
      "description": "The input message when the user rates the app."
    },
    "Reward": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The items granted. Indexed by item ID."
        },
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The currencies granted."
        },
        "energies": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The energy granted."
        },
        "energyModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RewardEnergyModifier"
          },
          "description": "The energy modifier granted."
        },
        "rewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RewardModifier"
          },
          "description": "The reward modifiers granted."
        },
        "grantTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "When the reward was granted, in UNIX time."
        },
        "itemInstances": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RewardInventoryItem"
          },
          "description": "The item instances granted. Indexed by item instance ID."
        }
      },
      "description": "Rewards granted to the player."
    },
    "RewardEnergyModifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of they modifier granted."
        },
        "operator": {
          "type": "string",
          "description": "The energy modifier operator."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The value to apply. Its behavior depends on the operator."
        },
        "durationSec": {
          "type": "string",
          "format": "uint64",
          "description": "The duration of the energy modifier in seconds."
        },
        "weight": {
          "type": "string",
          "format": "int64",
          "description": "The weight of the energy modifier, if weighted. Otherwise, -1."
        }
      },
      "description": "Energy modifier granted."
    },
    "RewardInventoryItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The count granted of the item."
        },
        "stringProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The properties with string values."
        },
        "numericProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "The properties with numeric values."
        },
        "instanceId": {
          "type": "string",
          "description": "The instance ID of the item."
        }
      },
      "description": "Inventory item granted."
    },
    "RewardList": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Reward"
          },
          "description": "The rewards granted."
        }
      },
      "description": "A list of rewards granted to the player."
    },
    "RewardModifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the reward content to modify."
        },
        "type": {
          "type": "string",
          "description": "The type of reward content to modify."
        },
        "operator": {
          "type": "string",
          "description": "The operator to apply."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The value to apply. Its behavior depends on the operator."
        },
        "durationSec": {
          "type": "string",
          "format": "uint64",
          "description": "The duration of the item modifier in seconds."
        }
      },
      "description": "A reward modifier temporally adjusts the way all rewards are handled in the economy."
    },
    "RewardRangeDouble": {
      "type": "object",
      "properties": {
        "min": {
          "type": "number",
          "format": "double",
          "description": "The minimum bound of the range."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "The maximum bound of the range."
        },
        "multiple": {
          "type": "number",
          "format": "double",
          "description": "A number that the result must be a multiple of."
        }
      },
      "description": "A range of possible values."
    },
    "RewardRangeInt32": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum bound of the range."
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum bound of the range."
        },
        "multiple": {
          "type": "integer",
          "format": "int32",
          "description": "A number that the result must be a multiple of."
        }
      },
      "description": "A range of possible values."
    },
    "RewardRangeInt64": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "int64",
          "description": "The minimum bound of the range."
        },
        "max": {
          "type": "string",
          "format": "int64",
          "description": "The maximum bound of the range."
        },
        "multiple": {
          "type": "string",
          "format": "int64",
          "description": "A number that the result must be a multiple of."
        }
      },
      "description": "A range of possible values."
    },
    "RewardRangeUInt64": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum bound of the range."
        },
        "max": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum bound of the range."
        },
        "multiple": {
          "type": "string",
          "format": "uint64",
          "description": "A number that the result must be a multiple of."
        }
      },
      "description": "A range of possible values."
    },
    "Stat": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name."
        },
        "public": {
          "type": "boolean",
          "description": "Indicator if this belongs to public or private stats."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Update time in UTC seconds."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Current value."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Number of values submitted."
        },
        "total": {
          "type": "string",
          "format": "int64",
          "description": "Total of all submitted values."
        },
        "min": {
          "type": "string",
          "format": "int64",
          "description": "Smallest value submitted."
        },
        "max": {
          "type": "string",
          "format": "int64",
          "description": "Largest value submitted."
        },
        "first": {
          "type": "string",
          "format": "int64",
          "description": "First value submitted."
        },
        "last": {
          "type": "string",
          "format": "int64",
          "description": "Latest value submitted."
        },
        "additionalProperties": {
          "type": "object",
          "description": "Additional properties."
        }
      },
      "description": "A single stat with associated information."
    },
    "StatList": {
      "type": "object",
      "properties": {
        "public": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Stat"
          },
          "description": "Public stat names and their associated data."
        },
        "private": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Stat"
          },
          "description": "Private stat names and their associated data."
        }
      },
      "description": "A list of stats all belonging to one user."
    },
    "StatUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Value."
        },
        "operator": {
          "$ref": "#/definitions/StatUpdateOperator",
          "description": "Operator."
        }
      },
      "description": "Describes a single stat update."
    },
    "StatUpdateOperator": {
      "type": "string",
      "enum": [
        "STAT_UPDATE_OPERATOR_UNSPECIFIED",
        "STAT_UPDATE_OPERATOR_SET",
        "STAT_UPDATE_OPERATOR_DELTA",
        "STAT_UPDATE_OPERATOR_MIN",
        "STAT_UPDATE_OPERATOR_MAX"
      ],
      "default": "STAT_UPDATE_OPERATOR_UNSPECIFIED",
      "description": "Indicate how a stats update should be handled.\n\n - STAT_UPDATE_OPERATOR_UNSPECIFIED: Unspecified. Defaults to Set.\n - STAT_UPDATE_OPERATOR_SET: Set the given value, overwriting any previous one.\n - STAT_UPDATE_OPERATOR_DELTA: Increment or decrement the existing value by the given amount. Equivalent to Set if no previous value existed.\n - STAT_UPDATE_OPERATOR_MIN: Use the new value if it's lower than the existing one. Equivalent to Set if no previous value existed.\n - STAT_UPDATE_OPERATOR_MAX: Use the new value if it's higher than the existing one. Equivalent to Set if no previous value existed."
    },
    "StatUpdateRequest": {
      "type": "object",
      "properties": {
        "public": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StatUpdate"
          },
          "description": "Public stat updates."
        },
        "private": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StatUpdate"
          },
          "description": "Private stat updates."
        }
      },
      "description": "Request an optionally batched stats update."
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Any"
          }
        }
      }
    },
    "Streak": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier."
        },
        "name": {
          "type": "string",
          "description": "Display name for this streak."
        },
        "description": {
          "type": "string",
          "description": "A user-facing description for this streak."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Current overall progress count."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "Maximum allowed overall progress count."
        },
        "countCurrentReset": {
          "type": "string",
          "format": "int64",
          "description": "Progress count submitted during this reset."
        },
        "maxCountCurrentReset": {
          "type": "string",
          "format": "int64",
          "description": "Maximum progress count allowed during any single reset."
        },
        "idleCountDecayReset": {
          "type": "string",
          "format": "int64",
          "description": "How much overall count is lost per idle reset."
        },
        "maxIdleCountDecay": {
          "type": "string",
          "format": "int64",
          "description": "How much overall count can be lost total in any contiguous idle period."
        },
        "prevResetTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak's last reset period was."
        },
        "resetTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak's next reset period is."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was first registered for this user."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was last updated."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak was last claimed."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak becomes available for use."
        },
        "endTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when the streak is no longer available for use."
        },
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StreakAvailableReward"
          },
          "description": "All rewards configured for this streak."
        },
        "availableRewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StreakAvailableReward"
          },
          "description": "Rewards currently available to claim for this streak."
        },
        "claimedRewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StreakReward"
          },
          "description": "Claimed rewards."
        },
        "canClaim": {
          "type": "boolean",
          "description": "Flag indicating if this streak can currently be claimed to obtain some rewards."
        },
        "canUpdate": {
          "type": "boolean",
          "description": "Flag indicating if submitting a count update is allowed."
        },
        "canReset": {
          "type": "boolean",
          "description": "Flag indicating if resetting the streak is allowed."
        },
        "claimCount": {
          "type": "string",
          "format": "int64",
          "description": "Last count that was claimed."
        }
      },
      "description": "An individual streak, along with its status and progress if any."
    },
    "StreakAvailableReward": {
      "type": "object",
      "properties": {
        "countMin": {
          "type": "string",
          "format": "int64",
          "description": "Minimum streak progress count required for this reward, inclusive."
        },
        "countMax": {
          "type": "string",
          "format": "int64",
          "description": "Maximum streak progress count required for this reward, inclusive."
        },
        "reward": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "Available reward contents."
        }
      },
      "description": "Represents an available reward based on the progress of a streak."
    },
    "StreakReward": {
      "type": "object",
      "properties": {
        "countMin": {
          "type": "string",
          "format": "int64",
          "description": "Minimum streak progress count required for this reward, inclusive."
        },
        "countMax": {
          "type": "string",
          "format": "int64",
          "description": "Maximum streak progress count required for this reward, inclusive."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "Reward that was actually granted."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX time (for gRPC clients) or ISO string (for REST clients) when this reward was claimed."
        }
      },
      "description": "A single claimed streak reward."
    },
    "StreaksClaimRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of streak identifiers to claim."
        }
      },
      "description": "Request to claim rewards for one or more streaks."
    },
    "StreaksList": {
      "type": "object",
      "properties": {
        "streaks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Streak"
          },
          "description": "All available streaks for the caller."
        }
      },
      "description": "A list of all streaks for a given user."
    },
    "StreaksResetRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of streak identifiers to reset."
        }
      },
      "description": "Request to fully reset the progress of one or more streaks."
    },
    "StreaksUpdateRequest": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Update one or more streaks by identifier."
        }
      },
      "description": "Request to update one or more streaks with new progress."
    },
    "SubAchievement": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "The category to group the sub-achievement together with others."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for when the sub-achievement reward was claimed, or zero if unclaimed."
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The count of the sub-achievement."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp for the current server time."
        },
        "description": {
          "type": "string",
          "description": "A description of the sub-achievement. May be an i18n code."
        },
        "expireTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this sub-achievement will expire. This may be before its next reset. A zero means it does not expire."
        },
        "id": {
          "type": "string",
          "description": "The ID of the sub-achievement."
        },
        "maxCount": {
          "type": "string",
          "format": "int64",
          "description": "The maximum count of the sub-achievement."
        },
        "name": {
          "type": "string",
          "description": "The name of the sub-achievement. May be an i18n code."
        },
        "preconditionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDs which are a precondition on the progress to be made on this sub-achievement."
        },
        "resetTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this sub-achievement will reset."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The outcome (rolled) reward for the achievement, if any."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available reward and its probabilities."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "autoClaim": {
          "type": "boolean",
          "description": "Whether the sub-achievement reward will be given automatically upon completion."
        },
        "autoReset": {
          "type": "boolean",
          "description": "Whether the sub-achievement will reset after completion."
        }
      },
      "description": "A sub-achievement is an achievement which belongs as part of a parent achievement."
    },
    "SyncAchievements": {
      "type": "object",
      "properties": {
        "achievements": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncAchievementsUpdate"
          },
          "description": "Achievement updates and associated metadata."
        }
      },
      "description": "Input for an offline state sync operation for the achievements system."
    },
    "SyncAchievementsUpdate": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Count to add."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the achievement first recorded progress."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the achievement update was generated on the client."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Claim time, if claimed offline."
        },
        "totalClaimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Total claim time, if claimed offline."
        }
      },
      "description": "Sync operation for a single achievement."
    },
    "SyncEconomy": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Currencies deltas."
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ActiveRewardModifier"
          },
          "description": "Economy modifiers to add."
        }
      },
      "description": "Input for an offline state sync operation for the economy system."
    },
    "SyncEnergy": {
      "type": "object",
      "properties": {
        "energies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncEnergyState"
          },
          "description": "Energies and associated full sync data."
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EnergyModifier"
          },
          "description": "Energy modifiers to add."
        }
      },
      "description": "Input for an offline state sync operation for the energy system."
    },
    "SyncEnergyState": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Current count."
        },
        "refillStartTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the energy started refilling."
        }
      },
      "description": "Full state (not delta) for an energy."
    },
    "SyncEventLeaderboardUpdate": {
      "type": "object",
      "properties": {
        "score": {
          "type": "string",
          "format": "int64",
          "description": "Score."
        },
        "subscore": {
          "type": "string",
          "format": "int64",
          "description": "Subscore."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the score was generated on the client."
        }
      },
      "description": "Single event leaderboard update."
    },
    "SyncEventLeaderboards": {
      "type": "object",
      "properties": {
        "eventLeaderboards": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncEventLeaderboardUpdate"
          },
          "description": "Updates for various event leaderboards, keyed by event leaderboard identifier."
        }
      },
      "description": "Input for an offline state sync of event leaderboard updates."
    },
    "SyncInventory": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncInventoryItem"
          },
          "description": "Map of instance IDs to update operation data."
        }
      },
      "description": "Input for an offline state sync operation for the inventory system."
    },
    "SyncInventoryItem": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "description": "Item identifier from config mapping."
        },
        "delta": {
          "type": "string",
          "format": "int64",
          "description": "Number of items to add or remove."
        },
        "stringProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Item properties with string values."
        },
        "numericProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Item properties with numeric values."
        }
      },
      "description": "Sync operation for a single inventory item."
    },
    "SyncProgressionUpdate": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The counts to set."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the progression was first updated on the client, if new."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time when the progression update was generated on the client."
        },
        "cost": {
          "$ref": "#/definitions/ProgressionCost",
          "description": "Cost paid to unlock the progression."
        }
      },
      "description": "Single progression update."
    },
    "SyncProgressions": {
      "type": "object",
      "properties": {
        "progressions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncProgressionUpdate"
          },
          "description": "Updates for various progressions, keyed by progression identifier."
        }
      },
      "description": "Input for an offline state sync of progressions updates."
    },
    "SyncRequest": {
      "type": "object",
      "properties": {
        "inventory": {
          "$ref": "#/definitions/SyncInventory",
          "description": "Inventory."
        },
        "economy": {
          "$ref": "#/definitions/SyncEconomy",
          "description": "Economy."
        },
        "achievements": {
          "$ref": "#/definitions/SyncAchievements",
          "description": "Achievements."
        },
        "energy": {
          "$ref": "#/definitions/SyncEnergy",
          "description": "Energy."
        },
        "eventLeaderboards": {
          "$ref": "#/definitions/SyncEventLeaderboards",
          "description": "Event leaderboards."
        },
        "progressions": {
          "$ref": "#/definitions/SyncProgressions",
          "description": "Progressions."
        },
        "stats": {
          "$ref": "#/definitions/StatUpdateRequest",
          "description": "Stats. Message reused from standard synchronous stats updates."
        },
        "tutorials": {
          "$ref": "#/definitions/SyncTutorials",
          "description": "Tutorials."
        },
        "unlockables": {
          "$ref": "#/definitions/SyncUnlockables",
          "description": "Unlockables."
        },
        "streaks": {
          "$ref": "#/definitions/SyncStreaks",
          "description": "Streaks."
        }
      },
      "description": "Input for an offline state sync operation."
    },
    "SyncResponse": {
      "type": "object",
      "properties": {
        "wallet": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Updated wallet data, if any."
        },
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "Inventory."
        },
        "achievements": {
          "$ref": "#/definitions/AchievementList",
          "description": "Achievements."
        },
        "energy": {
          "$ref": "#/definitions/EnergyList",
          "description": "Energies."
        },
        "eventLeaderboards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EventLeaderboard"
          },
          "description": "Event leaderboards."
        },
        "progressions": {
          "$ref": "#/definitions/ProgressionList",
          "description": "Progressions."
        },
        "stats": {
          "$ref": "#/definitions/StatList",
          "description": "Stats."
        },
        "tutorials": {
          "$ref": "#/definitions/TutorialList",
          "description": "Tutorials."
        },
        "unlockables": {
          "$ref": "#/definitions/UnlockablesList",
          "description": "Unlockables."
        },
        "activeRewardModifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ActiveRewardModifier"
          },
          "description": "The list of active reward modifiers."
        },
        "currentTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Current server time."
        },
        "streaks": {
          "$ref": "#/definitions/StreaksList",
          "description": "Streaks."
        }
      },
      "description": "Resulting updates after an offline state sync operation.\nFields are only populated if the corresponding updated was requested via the sync."
    },
    "SyncStreakUpdate": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Current progress count for this streak."
        },
        "countCurrentReset": {
          "type": "string",
          "format": "int64",
          "description": "Progress count for the current reset."
        },
        "claimCount": {
          "type": "string",
          "format": "int64",
          "description": "Last count that was claimed."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "When updates for this streak were first recorded."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "When an update for this streak was most recently recorded."
        },
        "claimTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "When the last claim for this streak was."
        },
        "claimedRewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StreakReward"
          },
          "description": "Record of rewards that have been claimed."
        }
      },
      "description": "Single streak state update."
    },
    "SyncStreaks": {
      "type": "object",
      "properties": {
        "resets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Streak identifiers to reset."
        },
        "updates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncStreakUpdate"
          },
          "description": "Streak state updates keyed by streak identifier."
        }
      },
      "description": "Input for an offline state sync of streaks updates."
    },
    "SyncTutorials": {
      "type": "object",
      "properties": {
        "accepts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Accept list."
        },
        "declines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Decline list."
        },
        "abandons": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Abandon list."
        },
        "updates": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Updates to tutorial steps. Implicitly counts as accepting these tutorials, if not accepted already."
        }
      },
      "description": "Input for an offline state sync of tutorials updates."
    },
    "SyncUnlockableUpdate": {
      "type": "object",
      "properties": {
        "unlockableId": {
          "type": "string",
          "description": "Unlockable identifier from config."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Time this unlockabled was granted."
        },
        "startTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Unlock start time, if any."
        },
        "unlockTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Unlock completion time, if any."
        }
      },
      "description": "Single unlockable update, either grant or unlock start."
    },
    "SyncUnlockables": {
      "type": "object",
      "properties": {
        "removes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unlockable instance IDs to remove."
        },
        "updates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SyncUnlockableUpdate"
          },
          "description": "Unlockable updates keyed by instance identifier, such as new grants or unlock starts."
        }
      },
      "description": "Input for an offline state sync of unlockables updates."
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of a team."
        },
        "creatorId": {
          "type": "string",
          "description": "The ID of the user who created the team."
        },
        "name": {
          "type": "string",
          "description": "The unique name of the team."
        },
        "description": {
          "type": "string",
          "description": "A description for the team."
        },
        "langTag": {
          "type": "string",
          "description": "The language expected to be a tag which follows the BCP-47 spec."
        },
        "metadata": {
          "type": "string",
          "description": "Additional information stored as a JSON object."
        },
        "avatarUrl": {
          "type": "string",
          "description": "A URL for an avatar image."
        },
        "open": {
          "type": "boolean",
          "description": "Anyone can join open groups, otherwise only admins can accept members."
        },
        "edgeCount": {
          "type": "integer",
          "format": "int32",
          "description": "The current count of all members in the group."
        },
        "maxCount": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of members allowed."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the group was created."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the group was last updated."
        },
        "icon": {
          "type": "string",
          "description": "The icon artwork reference ID for the team, if any."
        }
      },
      "description": "A Team represents a group of users who play together."
    },
    "TeamCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the team to be created."
        },
        "desc": {
          "type": "string",
          "description": "The description of the team to be created."
        },
        "open": {
          "type": "boolean",
          "description": "True if the team is open to join by any user."
        },
        "icon": {
          "type": "string",
          "description": "The icon artwork reference ID for the team, if any."
        },
        "langTag": {
          "type": "string",
          "description": "The language expected to be a tag which follows the BCP-47 spec."
        },
        "setupMetadata": {
          "type": "string",
          "description": "The starting metadata passed in as part of creating the team."
        }
      },
      "description": "A request to create a team."
    },
    "TeamList": {
      "type": "object",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Team"
          },
          "description": "The current page of teams returned in the list."
        },
        "cursor": {
          "type": "string",
          "description": "A cursor used to get the next page."
        }
      },
      "description": "A list of teams."
    },
    "TeamListRequest": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "An optional cursor used to get the next page."
        },
        "location": {
          "type": "string",
          "description": "The optional location filter."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "An optional limit on how many results are returned. Defaults to 10."
        }
      },
      "description": "A request to list teams which a user can join."
    },
    "TeamSearchRequest": {
      "type": "object",
      "properties": {
        "input": {
          "type": "string",
          "description": "The search term(s) passed in by the user."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "An optional limit on how many results are returned. Defaults to 10."
        },
        "langTag": {
          "type": "string",
          "description": "Additionally search by language, if specified."
        }
      },
      "description": "A request to search for teams which the user wants to join."
    },
    "TeamWriteChatMessageRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the team."
        },
        "content": {
          "type": "string",
          "description": "The content of the chat message. Usually an escaped JSON object."
        }
      },
      "description": "A request to write a chat message to the channel for a team the user is part of."
    },
    "Tutorial": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique tutorial identifier."
        },
        "current": {
          "type": "integer",
          "format": "int32",
          "description": "The current step in the tutorial."
        },
        "max": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum step in the tutorial based on configuration."
        },
        "state": {
          "$ref": "#/definitions/TutorialState",
          "description": "The accepted state of the tutorial."
        },
        "updateTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the tutorial was last updated."
        },
        "completeTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when the tutorial was completed, if it is completed."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        }
      },
      "description": "An individual set of tutorial steps."
    },
    "TutorialAbandonRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The tutorial to abandon."
        }
      },
      "description": "A request to abandon a tutorial."
    },
    "TutorialAcceptRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The tutorial to accept."
        }
      },
      "description": "A request to accept a tutorial."
    },
    "TutorialDeclineRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The tutorial to decline."
        }
      },
      "description": "A request to decline a tutorial."
    },
    "TutorialList": {
      "type": "object",
      "properties": {
        "tutorials": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Tutorial"
          },
          "description": "All available tutorials."
        }
      },
      "description": "The full tutorial statuses for a given user."
    },
    "TutorialResetRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The tutorials to reset."
        }
      },
      "description": "A request to reset the state of one or more tutorials."
    },
    "TutorialState": {
      "type": "string",
      "enum": [
        "TUTORIAL_STATE_NONE",
        "TUTORIAL_STATE_ACCEPTED",
        "TUTORIAL_STATE_DECLINED",
        "TUTORIAL_STATE_IN_PROGRESS",
        "TUTORIAL_STATE_COMPLETED",
        "TUTORIAL_STATE_ABANDONED"
      ],
      "default": "TUTORIAL_STATE_NONE",
      "description": "The states of a Tutorial.\n\n - TUTORIAL_STATE_NONE: The Tutorial has not been accepted/declined by the user yet.\n - TUTORIAL_STATE_ACCEPTED: The Tutorial was accepted.\n - TUTORIAL_STATE_DECLINED: The Tutorial was declined.\n - TUTORIAL_STATE_IN_PROGRESS: The Tutorial is in progress.\n - TUTORIAL_STATE_COMPLETED: The Tutorial has been completed.\n - TUTORIAL_STATE_ABANDONED: The Tutorial has been abandoned."
    },
    "TutorialUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The tutorial to update."
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "The latest step that should be marked completed. All previous steps will also be marked as completed."
        }
      },
      "description": "A request to update a tutorial."
    },
    "Unlockable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unlockable definition ID, eg. \"bronze-chest\"."
        },
        "instanceId": {
          "type": "string",
          "description": "The instance ID."
        },
        "category": {
          "type": "string",
          "description": "The category the unlockable is part of."
        },
        "startCost": {
          "$ref": "#/definitions/UnlockableCost",
          "description": "The cost to begin unlocking this particular unlockable."
        },
        "cost": {
          "$ref": "#/definitions/UnlockableCost",
          "description": "The cost to fully unlock this unlockable, accounting for any time already spent."
        },
        "description": {
          "type": "string",
          "description": "The description, if any. May be an i18n code."
        },
        "name": {
          "type": "string",
          "description": "The name. May be an i18n code."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The reward already granted when the unlockable has been claimed."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards for when the unlockable is claimed."
        },
        "waitTimeSec": {
          "type": "integer",
          "format": "int32",
          "description": "Total time this unlockable will take to unlock once activated."
        },
        "createTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this unlockable was granted to the user."
        },
        "unlockStartTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this unlockable began unlocking, or 0 if it is not active."
        },
        "unlockCompleteTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "The UNIX timestamp when this unlockable will complete unlocking and become claimable, or 0 if it is not active."
        },
        "canClaim": {
          "type": "boolean",
          "description": "If the unlock process has completed (either by time elapsed or purchase) and the unlockable reward can be claimed."
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata properties."
        },
        "advanceTimeSec": {
          "type": "string",
          "format": "int64",
          "description": "Additional time that has been added to speed up the unlockable's progress, if any."
        }
      },
      "description": "A single unlockable object."
    },
    "UnlockableCost": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The items which will be deducted."
        },
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The currencies which will be deducted."
        }
      },
      "description": "The unlockable cost, may relate to starting an unlock, or fully completing it."
    },
    "UnlockableSlotCost": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The items which will be deducted."
        },
        "currencies": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "The currencies which will be deducted."
        }
      },
      "description": "The cost to purchase an additional unlockable active slot."
    },
    "UnlockablesList": {
      "type": "object",
      "properties": {
        "unlockables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Unlockable"
          },
          "description": "The list of unlockables owned by a user."
        },
        "overflow": {
          "$ref": "#/definitions/Unlockable",
          "description": "The unlockable overflow slot."
        },
        "slots": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of non-overflow slots."
        },
        "activeSlots": {
          "type": "integer",
          "format": "int32",
          "description": "The current number of active slots."
        },
        "maxActiveSlots": {
          "type": "integer",
          "format": "int32",
          "description": "The max number of active slots the user can ever obtain."
        },
        "slotCost": {
          "$ref": "#/definitions/UnlockableSlotCost",
          "description": "The cost to purchase the next active slot, if another is available for purchase."
        },
        "instanceId": {
          "type": "string",
          "description": "The newly granted unlockable, if any."
        },
        "queuedUnlocks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unlockable instance IDs queued to start unlocking as soon as possible."
        },
        "maxQueuedUnlocks": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum unlock queue size."
        }
      },
      "description": "A list of unlockables currently owned by a user."
    },
    "UnlockablesQueueAddRequest": {
      "type": "object",
      "properties": {
        "instanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unlockable instance IDs to add."
        }
      },
      "description": "Request to add a set of unlockables to the unlock queue."
    },
    "UnlockablesQueueRemoveRequest": {
      "type": "object",
      "properties": {
        "instanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unlockable instance IDs to remove."
        }
      },
      "description": "Request to remove a set of unlockables from the unlock queue."
    },
    "UnlockablesQueueSetRequest": {
      "type": "object",
      "properties": {
        "instanceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unlockable instance IDs to set."
        }
      },
      "description": "Request to replace the unlock queue with the given set of unlockables."
    },
    "UnlockablesRequest": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "The unlockable instance ID."
        }
      },
      "description": "Request body for interacting with a specific unlockable."
    },
    "UnlockablesReward": {
      "type": "object",
      "properties": {
        "unlockables": {
          "$ref": "#/definitions/UnlockablesList",
          "description": "The updated state of remaining unlockables."
        },
        "reward": {
          "$ref": "#/definitions/Reward",
          "description": "The reward granted from the unlockable."
        },
        "availableRewards": {
          "$ref": "#/definitions/AvailableRewards",
          "description": "The available rewards active for the unlockable."
        }
      },
      "description": "A reward that was granted upon unlock, and a new state of all unlockables."
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
